
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f80  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401f80  00401f80  00011f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c54  20400000  00401f88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  20400c54  00402bdc  00020c54  2**2
                  ALLOC
  4 .stack        00002004  20400d14  00402c9c  00020c54  2**0
                  ALLOC
  5 .heap         00000200  20402d18  00404ca0  00020c54  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020c54  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020c82  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d507  00000000  00000000  00020cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c4e  00000000  00000000  0002e1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002aa1  00000000  00000000  0002fe30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005a8  00000000  00000000  000328d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00032e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001d213  00000000  00000000  00033529  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000733b  00000000  00000000  0005073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089f30  00000000  00000000  00057a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000ff0  00000000  00000000  000e19a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 2d 40 20 75 09 40 00 71 09 40 00 71 09 40 00     .-@ u.@.q.@.q.@.
  400010:	71 09 40 00 71 09 40 00 71 09 40 00 00 00 00 00     q.@.q.@.q.@.....
	...
  40002c:	71 09 40 00 71 09 40 00 00 00 00 00 71 09 40 00     q.@.q.@.....q.@.
  40003c:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  40004c:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  40005c:	71 09 40 00 71 09 40 00 00 00 00 00 d9 04 40 00     q.@.q.@.......@.
  40006c:	ed 04 40 00 01 05 40 00 71 09 40 00 71 09 40 00     ..@...@.q.@.q.@.
  40007c:	71 09 40 00 15 05 40 00 29 05 40 00 71 09 40 00     q.@...@.).@.q.@.
  40008c:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  40009c:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  4000ac:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  4000bc:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  4000cc:	71 09 40 00 00 00 00 00 71 09 40 00 00 00 00 00     q.@.....q.@.....
  4000dc:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  4000ec:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  4000fc:	71 09 40 00 71 09 40 00 71 09 40 00 71 09 40 00     q.@.q.@.q.@.q.@.
  40010c:	71 09 40 00 71 09 40 00 00 00 00 00 00 00 00 00     q.@.q.@.........
  40011c:	00 00 00 00 71 09 40 00 71 09 40 00 71 09 40 00     ....q.@.q.@.q.@.
  40012c:	71 09 40 00 71 09 40 00 00 00 00 00 71 09 40 00     q.@.q.@.....q.@.
  40013c:	71 09 40 00                                         q.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400c54 	.word	0x20400c54
  40015c:	00000000 	.word	0x00000000
  400160:	00401f88 	.word	0x00401f88

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00401f88 	.word	0x00401f88
  4001a0:	20400c58 	.word	0x20400c58
  4001a4:	00401f88 	.word	0x00401f88
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400b49 	.word	0x00400b49
  4001f8:	004005d9 	.word	0x004005d9
  4001fc:	0040062d 	.word	0x0040062d
  400200:	0040063d 	.word	0x0040063d
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	0040064d 	.word	0x0040064d
  400210:	0040053d 	.word	0x0040053d
  400214:	00400575 	.word	0x00400575
  400218:	00400a3d 	.word	0x00400a3d

0040021c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40021c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400220:	0053      	lsls	r3, r2, #1
  400222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400226:	fbb2 f2f3 	udiv	r2, r2, r3
  40022a:	3a01      	subs	r2, #1
  40022c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400230:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400234:	4770      	bx	lr

00400236 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400236:	6301      	str	r1, [r0, #48]	; 0x30
  400238:	4770      	bx	lr

0040023a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40023a:	6341      	str	r1, [r0, #52]	; 0x34
  40023c:	4770      	bx	lr

0040023e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40023e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400242:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400246:	d105      	bne.n	400254 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400248:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40024a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40024c:	bf14      	ite	ne
  40024e:	2001      	movne	r0, #1
  400250:	2000      	moveq	r0, #0
  400252:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400254:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400256:	e7f8      	b.n	40024a <pio_get+0xc>

00400258 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400258:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40025a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40025e:	d03a      	beq.n	4002d6 <pio_set_peripheral+0x7e>
  400260:	d813      	bhi.n	40028a <pio_set_peripheral+0x32>
  400262:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400266:	d025      	beq.n	4002b4 <pio_set_peripheral+0x5c>
  400268:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40026c:	d10a      	bne.n	400284 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40026e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400270:	4313      	orrs	r3, r2
  400272:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400274:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400276:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400278:	400b      	ands	r3, r1
  40027a:	ea23 0302 	bic.w	r3, r3, r2
  40027e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400280:	6042      	str	r2, [r0, #4]
  400282:	4770      	bx	lr
	switch (ul_type) {
  400284:	2900      	cmp	r1, #0
  400286:	d1fb      	bne.n	400280 <pio_set_peripheral+0x28>
  400288:	4770      	bx	lr
  40028a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40028e:	d021      	beq.n	4002d4 <pio_set_peripheral+0x7c>
  400290:	d809      	bhi.n	4002a6 <pio_set_peripheral+0x4e>
  400292:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400296:	d1f3      	bne.n	400280 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400298:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40029a:	4313      	orrs	r3, r2
  40029c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40029e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002a0:	4313      	orrs	r3, r2
  4002a2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002a4:	e7ec      	b.n	400280 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4002a6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002aa:	d013      	beq.n	4002d4 <pio_set_peripheral+0x7c>
  4002ac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002b0:	d010      	beq.n	4002d4 <pio_set_peripheral+0x7c>
  4002b2:	e7e5      	b.n	400280 <pio_set_peripheral+0x28>
{
  4002b4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002b6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002ba:	43d3      	mvns	r3, r2
  4002bc:	4021      	ands	r1, r4
  4002be:	461c      	mov	r4, r3
  4002c0:	4019      	ands	r1, r3
  4002c2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002c6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002c8:	400b      	ands	r3, r1
  4002ca:	4023      	ands	r3, r4
  4002cc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4002ce:	6042      	str	r2, [r0, #4]
}
  4002d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002d4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4002da:	400b      	ands	r3, r1
  4002dc:	ea23 0302 	bic.w	r3, r3, r2
  4002e0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002e4:	4313      	orrs	r3, r2
  4002e6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002e8:	e7ca      	b.n	400280 <pio_set_peripheral+0x28>

004002ea <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002ea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4002ec:	f012 0f01 	tst.w	r2, #1
  4002f0:	d10d      	bne.n	40030e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4002f2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4002f4:	f012 0f0a 	tst.w	r2, #10
  4002f8:	d00b      	beq.n	400312 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4002fa:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4002fc:	f012 0f02 	tst.w	r2, #2
  400300:	d109      	bne.n	400316 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400302:	f012 0f08 	tst.w	r2, #8
  400306:	d008      	beq.n	40031a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400308:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40030c:	e005      	b.n	40031a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40030e:	6641      	str	r1, [r0, #100]	; 0x64
  400310:	e7f0      	b.n	4002f4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400312:	6241      	str	r1, [r0, #36]	; 0x24
  400314:	e7f2      	b.n	4002fc <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400316:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40031a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40031c:	6001      	str	r1, [r0, #0]
  40031e:	4770      	bx	lr

00400320 <pio_set_output>:
{
  400320:	b410      	push	{r4}
  400322:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400324:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400326:	b94c      	cbnz	r4, 40033c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400328:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40032a:	b14b      	cbz	r3, 400340 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40032c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40032e:	b94a      	cbnz	r2, 400344 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400330:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400332:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400334:	6001      	str	r1, [r0, #0]
}
  400336:	f85d 4b04 	ldr.w	r4, [sp], #4
  40033a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40033c:	6641      	str	r1, [r0, #100]	; 0x64
  40033e:	e7f4      	b.n	40032a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400340:	6541      	str	r1, [r0, #84]	; 0x54
  400342:	e7f4      	b.n	40032e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400344:	6301      	str	r1, [r0, #48]	; 0x30
  400346:	e7f4      	b.n	400332 <pio_set_output+0x12>

00400348 <pio_configure>:
{
  400348:	b570      	push	{r4, r5, r6, lr}
  40034a:	b082      	sub	sp, #8
  40034c:	4605      	mov	r5, r0
  40034e:	4616      	mov	r6, r2
  400350:	461c      	mov	r4, r3
	switch (ul_type) {
  400352:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400356:	d014      	beq.n	400382 <pio_configure+0x3a>
  400358:	d90a      	bls.n	400370 <pio_configure+0x28>
  40035a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40035e:	d024      	beq.n	4003aa <pio_configure+0x62>
  400360:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400364:	d021      	beq.n	4003aa <pio_configure+0x62>
  400366:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40036a:	d017      	beq.n	40039c <pio_configure+0x54>
		return 0;
  40036c:	2000      	movs	r0, #0
  40036e:	e01a      	b.n	4003a6 <pio_configure+0x5e>
	switch (ul_type) {
  400370:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400374:	d005      	beq.n	400382 <pio_configure+0x3a>
  400376:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40037a:	d002      	beq.n	400382 <pio_configure+0x3a>
  40037c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400380:	d1f4      	bne.n	40036c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400382:	4632      	mov	r2, r6
  400384:	4628      	mov	r0, r5
  400386:	4b11      	ldr	r3, [pc, #68]	; (4003cc <pio_configure+0x84>)
  400388:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40038a:	f014 0f01 	tst.w	r4, #1
  40038e:	d102      	bne.n	400396 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400390:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400392:	2001      	movs	r0, #1
  400394:	e007      	b.n	4003a6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400396:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400398:	2001      	movs	r0, #1
  40039a:	e004      	b.n	4003a6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40039c:	461a      	mov	r2, r3
  40039e:	4631      	mov	r1, r6
  4003a0:	4b0b      	ldr	r3, [pc, #44]	; (4003d0 <pio_configure+0x88>)
  4003a2:	4798      	blx	r3
	return 1;
  4003a4:	2001      	movs	r0, #1
}
  4003a6:	b002      	add	sp, #8
  4003a8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4003aa:	f004 0301 	and.w	r3, r4, #1
  4003ae:	9300      	str	r3, [sp, #0]
  4003b0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4003b4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4003b8:	bf14      	ite	ne
  4003ba:	2200      	movne	r2, #0
  4003bc:	2201      	moveq	r2, #1
  4003be:	4631      	mov	r1, r6
  4003c0:	4628      	mov	r0, r5
  4003c2:	4c04      	ldr	r4, [pc, #16]	; (4003d4 <pio_configure+0x8c>)
  4003c4:	47a0      	blx	r4
	return 1;
  4003c6:	2001      	movs	r0, #1
		break;
  4003c8:	e7ed      	b.n	4003a6 <pio_configure+0x5e>
  4003ca:	bf00      	nop
  4003cc:	00400259 	.word	0x00400259
  4003d0:	004002eb 	.word	0x004002eb
  4003d4:	00400321 	.word	0x00400321

004003d8 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4003d8:	f012 0f10 	tst.w	r2, #16
  4003dc:	d012      	beq.n	400404 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4003de:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4003e2:	f012 0f20 	tst.w	r2, #32
  4003e6:	d007      	beq.n	4003f8 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4003e8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4003ec:	f012 0f40 	tst.w	r2, #64	; 0x40
  4003f0:	d005      	beq.n	4003fe <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4003f2:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4003f6:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4003f8:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4003fc:	e7f6      	b.n	4003ec <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4003fe:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400402:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400404:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400408:	4770      	bx	lr

0040040a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40040a:	6401      	str	r1, [r0, #64]	; 0x40
  40040c:	4770      	bx	lr

0040040e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40040e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400410:	4770      	bx	lr

00400412 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400412:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400414:	4770      	bx	lr
	...

00400418 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40041c:	4604      	mov	r4, r0
  40041e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400420:	4b0e      	ldr	r3, [pc, #56]	; (40045c <pio_handler_process+0x44>)
  400422:	4798      	blx	r3
  400424:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400426:	4620      	mov	r0, r4
  400428:	4b0d      	ldr	r3, [pc, #52]	; (400460 <pio_handler_process+0x48>)
  40042a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40042c:	4005      	ands	r5, r0
  40042e:	d013      	beq.n	400458 <pio_handler_process+0x40>
  400430:	4c0c      	ldr	r4, [pc, #48]	; (400464 <pio_handler_process+0x4c>)
  400432:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400436:	e003      	b.n	400440 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400438:	42b4      	cmp	r4, r6
  40043a:	d00d      	beq.n	400458 <pio_handler_process+0x40>
  40043c:	3410      	adds	r4, #16
		while (status != 0) {
  40043e:	b15d      	cbz	r5, 400458 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400440:	6820      	ldr	r0, [r4, #0]
  400442:	4540      	cmp	r0, r8
  400444:	d1f8      	bne.n	400438 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400446:	6861      	ldr	r1, [r4, #4]
  400448:	4229      	tst	r1, r5
  40044a:	d0f5      	beq.n	400438 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40044c:	68e3      	ldr	r3, [r4, #12]
  40044e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400450:	6863      	ldr	r3, [r4, #4]
  400452:	ea25 0503 	bic.w	r5, r5, r3
  400456:	e7ef      	b.n	400438 <pio_handler_process+0x20>
  400458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40045c:	0040040f 	.word	0x0040040f
  400460:	00400413 	.word	0x00400413
  400464:	20400c70 	.word	0x20400c70

00400468 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40046a:	4c18      	ldr	r4, [pc, #96]	; (4004cc <pio_handler_set+0x64>)
  40046c:	6826      	ldr	r6, [r4, #0]
  40046e:	2e06      	cmp	r6, #6
  400470:	d82a      	bhi.n	4004c8 <pio_handler_set+0x60>
  400472:	f04f 0c00 	mov.w	ip, #0
  400476:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400478:	4f15      	ldr	r7, [pc, #84]	; (4004d0 <pio_handler_set+0x68>)
  40047a:	e004      	b.n	400486 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40047c:	3401      	adds	r4, #1
  40047e:	b2e4      	uxtb	r4, r4
  400480:	46a4      	mov	ip, r4
  400482:	42a6      	cmp	r6, r4
  400484:	d309      	bcc.n	40049a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400486:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400488:	0125      	lsls	r5, r4, #4
  40048a:	597d      	ldr	r5, [r7, r5]
  40048c:	428d      	cmp	r5, r1
  40048e:	d1f5      	bne.n	40047c <pio_handler_set+0x14>
  400490:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400494:	686d      	ldr	r5, [r5, #4]
  400496:	4295      	cmp	r5, r2
  400498:	d1f0      	bne.n	40047c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40049a:	4d0d      	ldr	r5, [pc, #52]	; (4004d0 <pio_handler_set+0x68>)
  40049c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4004a0:	eb05 040e 	add.w	r4, r5, lr
  4004a4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4004a8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4004aa:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4004ac:	9906      	ldr	r1, [sp, #24]
  4004ae:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4004b0:	3601      	adds	r6, #1
  4004b2:	4566      	cmp	r6, ip
  4004b4:	d005      	beq.n	4004c2 <pio_handler_set+0x5a>
  4004b6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4004b8:	461a      	mov	r2, r3
  4004ba:	4b06      	ldr	r3, [pc, #24]	; (4004d4 <pio_handler_set+0x6c>)
  4004bc:	4798      	blx	r3

	return 0;
  4004be:	2000      	movs	r0, #0
  4004c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4004c2:	4902      	ldr	r1, [pc, #8]	; (4004cc <pio_handler_set+0x64>)
  4004c4:	600e      	str	r6, [r1, #0]
  4004c6:	e7f6      	b.n	4004b6 <pio_handler_set+0x4e>
		return 1;
  4004c8:	2001      	movs	r0, #1
}
  4004ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004cc:	20400ce0 	.word	0x20400ce0
  4004d0:	20400c70 	.word	0x20400c70
  4004d4:	004003d9 	.word	0x004003d9

004004d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004da:	210a      	movs	r1, #10
  4004dc:	4801      	ldr	r0, [pc, #4]	; (4004e4 <PIOA_Handler+0xc>)
  4004de:	4b02      	ldr	r3, [pc, #8]	; (4004e8 <PIOA_Handler+0x10>)
  4004e0:	4798      	blx	r3
  4004e2:	bd08      	pop	{r3, pc}
  4004e4:	400e0e00 	.word	0x400e0e00
  4004e8:	00400419 	.word	0x00400419

004004ec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004ec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004ee:	210b      	movs	r1, #11
  4004f0:	4801      	ldr	r0, [pc, #4]	; (4004f8 <PIOB_Handler+0xc>)
  4004f2:	4b02      	ldr	r3, [pc, #8]	; (4004fc <PIOB_Handler+0x10>)
  4004f4:	4798      	blx	r3
  4004f6:	bd08      	pop	{r3, pc}
  4004f8:	400e1000 	.word	0x400e1000
  4004fc:	00400419 	.word	0x00400419

00400500 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400500:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400502:	210c      	movs	r1, #12
  400504:	4801      	ldr	r0, [pc, #4]	; (40050c <PIOC_Handler+0xc>)
  400506:	4b02      	ldr	r3, [pc, #8]	; (400510 <PIOC_Handler+0x10>)
  400508:	4798      	blx	r3
  40050a:	bd08      	pop	{r3, pc}
  40050c:	400e1200 	.word	0x400e1200
  400510:	00400419 	.word	0x00400419

00400514 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400514:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400516:	2110      	movs	r1, #16
  400518:	4801      	ldr	r0, [pc, #4]	; (400520 <PIOD_Handler+0xc>)
  40051a:	4b02      	ldr	r3, [pc, #8]	; (400524 <PIOD_Handler+0x10>)
  40051c:	4798      	blx	r3
  40051e:	bd08      	pop	{r3, pc}
  400520:	400e1400 	.word	0x400e1400
  400524:	00400419 	.word	0x00400419

00400528 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400528:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40052a:	2111      	movs	r1, #17
  40052c:	4801      	ldr	r0, [pc, #4]	; (400534 <PIOE_Handler+0xc>)
  40052e:	4b02      	ldr	r3, [pc, #8]	; (400538 <PIOE_Handler+0x10>)
  400530:	4798      	blx	r3
  400532:	bd08      	pop	{r3, pc}
  400534:	400e1600 	.word	0x400e1600
  400538:	00400419 	.word	0x00400419

0040053c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40053c:	2803      	cmp	r0, #3
  40053e:	d011      	beq.n	400564 <pmc_mck_set_division+0x28>
  400540:	2804      	cmp	r0, #4
  400542:	d012      	beq.n	40056a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400544:	2802      	cmp	r0, #2
  400546:	bf0c      	ite	eq
  400548:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40054c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40054e:	4a08      	ldr	r2, [pc, #32]	; (400570 <pmc_mck_set_division+0x34>)
  400550:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400556:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400558:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40055a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40055c:	f013 0f08 	tst.w	r3, #8
  400560:	d0fb      	beq.n	40055a <pmc_mck_set_division+0x1e>
}
  400562:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400564:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400568:	e7f1      	b.n	40054e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40056a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40056e:	e7ee      	b.n	40054e <pmc_mck_set_division+0x12>
  400570:	400e0600 	.word	0x400e0600

00400574 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400574:	4a17      	ldr	r2, [pc, #92]	; (4005d4 <pmc_switch_mck_to_pllack+0x60>)
  400576:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40057c:	4318      	orrs	r0, r3
  40057e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400580:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400582:	f013 0f08 	tst.w	r3, #8
  400586:	d10a      	bne.n	40059e <pmc_switch_mck_to_pllack+0x2a>
  400588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40058c:	4911      	ldr	r1, [pc, #68]	; (4005d4 <pmc_switch_mck_to_pllack+0x60>)
  40058e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400590:	f012 0f08 	tst.w	r2, #8
  400594:	d103      	bne.n	40059e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400596:	3b01      	subs	r3, #1
  400598:	d1f9      	bne.n	40058e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40059a:	2001      	movs	r0, #1
  40059c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40059e:	4a0d      	ldr	r2, [pc, #52]	; (4005d4 <pmc_switch_mck_to_pllack+0x60>)
  4005a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005a2:	f023 0303 	bic.w	r3, r3, #3
  4005a6:	f043 0302 	orr.w	r3, r3, #2
  4005aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ae:	f013 0f08 	tst.w	r3, #8
  4005b2:	d10a      	bne.n	4005ca <pmc_switch_mck_to_pllack+0x56>
  4005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005b8:	4906      	ldr	r1, [pc, #24]	; (4005d4 <pmc_switch_mck_to_pllack+0x60>)
  4005ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005bc:	f012 0f08 	tst.w	r2, #8
  4005c0:	d105      	bne.n	4005ce <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005c2:	3b01      	subs	r3, #1
  4005c4:	d1f9      	bne.n	4005ba <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005c6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005c8:	4770      	bx	lr
	return 0;
  4005ca:	2000      	movs	r0, #0
  4005cc:	4770      	bx	lr
  4005ce:	2000      	movs	r0, #0
  4005d0:	4770      	bx	lr
  4005d2:	bf00      	nop
  4005d4:	400e0600 	.word	0x400e0600

004005d8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005d8:	b9a0      	cbnz	r0, 400604 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005da:	480e      	ldr	r0, [pc, #56]	; (400614 <pmc_switch_mainck_to_xtal+0x3c>)
  4005dc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005de:	0209      	lsls	r1, r1, #8
  4005e0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005e2:	4a0d      	ldr	r2, [pc, #52]	; (400618 <pmc_switch_mainck_to_xtal+0x40>)
  4005e4:	401a      	ands	r2, r3
  4005e6:	4b0d      	ldr	r3, [pc, #52]	; (40061c <pmc_switch_mainck_to_xtal+0x44>)
  4005e8:	4313      	orrs	r3, r2
  4005ea:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005ec:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005ee:	4602      	mov	r2, r0
  4005f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005f2:	f013 0f01 	tst.w	r3, #1
  4005f6:	d0fb      	beq.n	4005f0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005f8:	4a06      	ldr	r2, [pc, #24]	; (400614 <pmc_switch_mainck_to_xtal+0x3c>)
  4005fa:	6a11      	ldr	r1, [r2, #32]
  4005fc:	4b08      	ldr	r3, [pc, #32]	; (400620 <pmc_switch_mainck_to_xtal+0x48>)
  4005fe:	430b      	orrs	r3, r1
  400600:	6213      	str	r3, [r2, #32]
  400602:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400604:	4903      	ldr	r1, [pc, #12]	; (400614 <pmc_switch_mainck_to_xtal+0x3c>)
  400606:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400608:	4a06      	ldr	r2, [pc, #24]	; (400624 <pmc_switch_mainck_to_xtal+0x4c>)
  40060a:	401a      	ands	r2, r3
  40060c:	4b06      	ldr	r3, [pc, #24]	; (400628 <pmc_switch_mainck_to_xtal+0x50>)
  40060e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400610:	620b      	str	r3, [r1, #32]
  400612:	4770      	bx	lr
  400614:	400e0600 	.word	0x400e0600
  400618:	ffc8fffc 	.word	0xffc8fffc
  40061c:	00370001 	.word	0x00370001
  400620:	01370000 	.word	0x01370000
  400624:	fec8fffc 	.word	0xfec8fffc
  400628:	01370002 	.word	0x01370002

0040062c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40062c:	4b02      	ldr	r3, [pc, #8]	; (400638 <pmc_osc_is_ready_mainck+0xc>)
  40062e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400630:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	400e0600 	.word	0x400e0600

0040063c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40063c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400640:	4b01      	ldr	r3, [pc, #4]	; (400648 <pmc_disable_pllack+0xc>)
  400642:	629a      	str	r2, [r3, #40]	; 0x28
  400644:	4770      	bx	lr
  400646:	bf00      	nop
  400648:	400e0600 	.word	0x400e0600

0040064c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40064c:	4b02      	ldr	r3, [pc, #8]	; (400658 <pmc_is_locked_pllack+0xc>)
  40064e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400650:	f000 0002 	and.w	r0, r0, #2
  400654:	4770      	bx	lr
  400656:	bf00      	nop
  400658:	400e0600 	.word	0x400e0600

0040065c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40065c:	283f      	cmp	r0, #63	; 0x3f
  40065e:	d81e      	bhi.n	40069e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400660:	281f      	cmp	r0, #31
  400662:	d80c      	bhi.n	40067e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400664:	4b11      	ldr	r3, [pc, #68]	; (4006ac <pmc_enable_periph_clk+0x50>)
  400666:	699a      	ldr	r2, [r3, #24]
  400668:	2301      	movs	r3, #1
  40066a:	4083      	lsls	r3, r0
  40066c:	4393      	bics	r3, r2
  40066e:	d018      	beq.n	4006a2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400670:	2301      	movs	r3, #1
  400672:	fa03 f000 	lsl.w	r0, r3, r0
  400676:	4b0d      	ldr	r3, [pc, #52]	; (4006ac <pmc_enable_periph_clk+0x50>)
  400678:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40067a:	2000      	movs	r0, #0
  40067c:	4770      	bx	lr
		ul_id -= 32;
  40067e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400680:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <pmc_enable_periph_clk+0x50>)
  400682:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400686:	2301      	movs	r3, #1
  400688:	4083      	lsls	r3, r0
  40068a:	4393      	bics	r3, r2
  40068c:	d00b      	beq.n	4006a6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40068e:	2301      	movs	r3, #1
  400690:	fa03 f000 	lsl.w	r0, r3, r0
  400694:	4b05      	ldr	r3, [pc, #20]	; (4006ac <pmc_enable_periph_clk+0x50>)
  400696:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40069a:	2000      	movs	r0, #0
  40069c:	4770      	bx	lr
		return 1;
  40069e:	2001      	movs	r0, #1
  4006a0:	4770      	bx	lr
	return 0;
  4006a2:	2000      	movs	r0, #0
  4006a4:	4770      	bx	lr
  4006a6:	2000      	movs	r0, #0
}
  4006a8:	4770      	bx	lr
  4006aa:	bf00      	nop
  4006ac:	400e0600 	.word	0x400e0600

004006b0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4006b0:	4770      	bx	lr
	...

004006b4 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4006b4:	4a10      	ldr	r2, [pc, #64]	; (4006f8 <pmc_enable_waitmode+0x44>)
  4006b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4006c0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4006c2:	6a11      	ldr	r1, [r2, #32]
  4006c4:	4b0d      	ldr	r3, [pc, #52]	; (4006fc <pmc_enable_waitmode+0x48>)
  4006c6:	430b      	orrs	r3, r1
  4006c8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4006ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006cc:	f013 0f08 	tst.w	r3, #8
  4006d0:	d0fb      	beq.n	4006ca <pmc_enable_waitmode+0x16>
  4006d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4006d6:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4006d8:	3b01      	subs	r3, #1
  4006da:	d1fc      	bne.n	4006d6 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4006dc:	4a06      	ldr	r2, [pc, #24]	; (4006f8 <pmc_enable_waitmode+0x44>)
  4006de:	6a13      	ldr	r3, [r2, #32]
  4006e0:	f013 0f08 	tst.w	r3, #8
  4006e4:	d0fb      	beq.n	4006de <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4006e6:	4a04      	ldr	r2, [pc, #16]	; (4006f8 <pmc_enable_waitmode+0x44>)
  4006e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4006f2:	6713      	str	r3, [r2, #112]	; 0x70
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0600 	.word	0x400e0600
  4006fc:	00370004 	.word	0x00370004

00400700 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400704:	1e43      	subs	r3, r0, #1
  400706:	2b04      	cmp	r3, #4
  400708:	f200 8105 	bhi.w	400916 <pmc_sleep+0x216>
  40070c:	e8df f013 	tbh	[pc, r3, lsl #1]
  400710:	00050005 	.word	0x00050005
  400714:	00130013 	.word	0x00130013
  400718:	00f4      	.short	0x00f4
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40071a:	4a80      	ldr	r2, [pc, #512]	; (40091c <pmc_sleep+0x21c>)
  40071c:	6913      	ldr	r3, [r2, #16]
  40071e:	f023 0304 	bic.w	r3, r3, #4
  400722:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400724:	2201      	movs	r2, #1
  400726:	4b7e      	ldr	r3, [pc, #504]	; (400920 <pmc_sleep+0x220>)
  400728:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40072a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40072e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400730:	bf30      	wfi
  400732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400736:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400738:	2803      	cmp	r0, #3
  40073a:	bf0c      	ite	eq
  40073c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40073e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400742:	4b78      	ldr	r3, [pc, #480]	; (400924 <pmc_sleep+0x224>)
  400744:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400746:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400748:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40074c:	2200      	movs	r2, #0
  40074e:	4b74      	ldr	r3, [pc, #464]	; (400920 <pmc_sleep+0x220>)
  400750:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400752:	2201      	movs	r2, #1
  400754:	4b74      	ldr	r3, [pc, #464]	; (400928 <pmc_sleep+0x228>)
  400756:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400758:	4b74      	ldr	r3, [pc, #464]	; (40092c <pmc_sleep+0x22c>)
  40075a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40075c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40075e:	4a74      	ldr	r2, [pc, #464]	; (400930 <pmc_sleep+0x230>)
  400760:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400764:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400766:	4a73      	ldr	r2, [pc, #460]	; (400934 <pmc_sleep+0x234>)
  400768:	433a      	orrs	r2, r7
  40076a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40076c:	f005 0903 	and.w	r9, r5, #3
  400770:	f1b9 0f01 	cmp.w	r9, #1
  400774:	f240 8089 	bls.w	40088a <pmc_sleep+0x18a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400778:	f025 0103 	bic.w	r1, r5, #3
  40077c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400780:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400782:	461a      	mov	r2, r3
  400784:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400786:	f013 0f08 	tst.w	r3, #8
  40078a:	d0fb      	beq.n	400784 <pmc_sleep+0x84>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40078c:	f011 0f70 	tst.w	r1, #112	; 0x70
  400790:	d008      	beq.n	4007a4 <pmc_sleep+0xa4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400792:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400796:	4b65      	ldr	r3, [pc, #404]	; (40092c <pmc_sleep+0x22c>)
  400798:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40079a:	461a      	mov	r2, r3
  40079c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40079e:	f013 0f08 	tst.w	r3, #8
  4007a2:	d0fb      	beq.n	40079c <pmc_sleep+0x9c>
	pmc_disable_pllack();
  4007a4:	4b64      	ldr	r3, [pc, #400]	; (400938 <pmc_sleep+0x238>)
  4007a6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4007a8:	4a60      	ldr	r2, [pc, #384]	; (40092c <pmc_sleep+0x22c>)
  4007aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4007b0:	d0fb      	beq.n	4007aa <pmc_sleep+0xaa>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4007b2:	4a5e      	ldr	r2, [pc, #376]	; (40092c <pmc_sleep+0x22c>)
  4007b4:	6a11      	ldr	r1, [r2, #32]
  4007b6:	4b61      	ldr	r3, [pc, #388]	; (40093c <pmc_sleep+0x23c>)
  4007b8:	400b      	ands	r3, r1
  4007ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4007c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4007c6:	d0fb      	beq.n	4007c0 <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4007c8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4007cc:	4a58      	ldr	r2, [pc, #352]	; (400930 <pmc_sleep+0x230>)
  4007ce:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4007d0:	2c04      	cmp	r4, #4
  4007d2:	d05c      	beq.n	40088e <pmc_sleep+0x18e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4007d4:	4c52      	ldr	r4, [pc, #328]	; (400920 <pmc_sleep+0x220>)
  4007d6:	2301      	movs	r3, #1
  4007d8:	7023      	strb	r3, [r4, #0]
  4007da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007de:	b662      	cpsie	i

		pmc_enable_waitmode();
  4007e0:	4b57      	ldr	r3, [pc, #348]	; (400940 <pmc_sleep+0x240>)
  4007e2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4007e4:	b672      	cpsid	i
  4007e6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4007ea:	2300      	movs	r3, #0
  4007ec:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4007ee:	f017 0f02 	tst.w	r7, #2
  4007f2:	d055      	beq.n	4008a0 <pmc_sleep+0x1a0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007f4:	4a4d      	ldr	r2, [pc, #308]	; (40092c <pmc_sleep+0x22c>)
  4007f6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007f8:	4952      	ldr	r1, [pc, #328]	; (400944 <pmc_sleep+0x244>)
  4007fa:	4019      	ands	r1, r3
  4007fc:	4b52      	ldr	r3, [pc, #328]	; (400948 <pmc_sleep+0x248>)
  4007fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400800:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400802:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  400804:	4b51      	ldr	r3, [pc, #324]	; (40094c <pmc_sleep+0x24c>)
  400806:	400b      	ands	r3, r1
  400808:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40080c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40080e:	4b50      	ldr	r3, [pc, #320]	; (400950 <pmc_sleep+0x250>)
  400810:	4033      	ands	r3, r6
  400812:	2b00      	cmp	r3, #0
  400814:	d06e      	beq.n	4008f4 <pmc_sleep+0x1f4>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400816:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40081a:	4b44      	ldr	r3, [pc, #272]	; (40092c <pmc_sleep+0x22c>)
  40081c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40081e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400820:	f1b9 0f02 	cmp.w	r9, #2
  400824:	d104      	bne.n	400830 <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400826:	4a41      	ldr	r2, [pc, #260]	; (40092c <pmc_sleep+0x22c>)
  400828:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40082a:	f013 0f02 	tst.w	r3, #2
  40082e:	d0fb      	beq.n	400828 <pmc_sleep+0x128>
	mckr = PMC->PMC_MCKR;
  400830:	4a3e      	ldr	r2, [pc, #248]	; (40092c <pmc_sleep+0x22c>)
  400832:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400838:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40083c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40083e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400840:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400842:	f013 0f08 	tst.w	r3, #8
  400846:	d0fb      	beq.n	400840 <pmc_sleep+0x140>
	EFC0->EEFC_FMR = fmr_setting;
  400848:	4b39      	ldr	r3, [pc, #228]	; (400930 <pmc_sleep+0x230>)
  40084a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40084e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400852:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400854:	461a      	mov	r2, r3
  400856:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400858:	f013 0f08 	tst.w	r3, #8
  40085c:	d0fb      	beq.n	400856 <pmc_sleep+0x156>
	while (!(PMC->PMC_SR & pll_sr));
  40085e:	4a33      	ldr	r2, [pc, #204]	; (40092c <pmc_sleep+0x22c>)
  400860:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400862:	420b      	tst	r3, r1
  400864:	d0fc      	beq.n	400860 <pmc_sleep+0x160>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400866:	2200      	movs	r2, #0
  400868:	4b2f      	ldr	r3, [pc, #188]	; (400928 <pmc_sleep+0x228>)
  40086a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40086c:	4b39      	ldr	r3, [pc, #228]	; (400954 <pmc_sleep+0x254>)
  40086e:	681b      	ldr	r3, [r3, #0]
  400870:	b11b      	cbz	r3, 40087a <pmc_sleep+0x17a>
			callback_clocks_restored();
  400872:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400874:	2200      	movs	r2, #0
  400876:	4b37      	ldr	r3, [pc, #220]	; (400954 <pmc_sleep+0x254>)
  400878:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40087a:	2201      	movs	r2, #1
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <pmc_sleep+0x220>)
  40087e:	701a      	strb	r2, [r3, #0]
  400880:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400884:	b662      	cpsie	i
  400886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40088a:	4629      	mov	r1, r5
  40088c:	e77e      	b.n	40078c <pmc_sleep+0x8c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40088e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400892:	6a11      	ldr	r1, [r2, #32]
  400894:	4b30      	ldr	r3, [pc, #192]	; (400958 <pmc_sleep+0x258>)
  400896:	400b      	ands	r3, r1
  400898:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40089c:	6213      	str	r3, [r2, #32]
  40089e:	e799      	b.n	4007d4 <pmc_sleep+0xd4>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4008a0:	f017 0f01 	tst.w	r7, #1
  4008a4:	d0b3      	beq.n	40080e <pmc_sleep+0x10e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4008a6:	4b21      	ldr	r3, [pc, #132]	; (40092c <pmc_sleep+0x22c>)
  4008a8:	6a1b      	ldr	r3, [r3, #32]
  4008aa:	f013 0f01 	tst.w	r3, #1
  4008ae:	d10b      	bne.n	4008c8 <pmc_sleep+0x1c8>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008b0:	491e      	ldr	r1, [pc, #120]	; (40092c <pmc_sleep+0x22c>)
  4008b2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4008b4:	4a29      	ldr	r2, [pc, #164]	; (40095c <pmc_sleep+0x25c>)
  4008b6:	401a      	ands	r2, r3
  4008b8:	4b29      	ldr	r3, [pc, #164]	; (400960 <pmc_sleep+0x260>)
  4008ba:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008bc:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008be:	460a      	mov	r2, r1
  4008c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008c2:	f013 0f01 	tst.w	r3, #1
  4008c6:	d0fb      	beq.n	4008c0 <pmc_sleep+0x1c0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4008c8:	4b18      	ldr	r3, [pc, #96]	; (40092c <pmc_sleep+0x22c>)
  4008ca:	6a1b      	ldr	r3, [r3, #32]
  4008cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008d0:	d108      	bne.n	4008e4 <pmc_sleep+0x1e4>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008d2:	4a16      	ldr	r2, [pc, #88]	; (40092c <pmc_sleep+0x22c>)
  4008d4:	6a11      	ldr	r1, [r2, #32]
  4008d6:	4b23      	ldr	r3, [pc, #140]	; (400964 <pmc_sleep+0x264>)
  4008d8:	430b      	orrs	r3, r1
  4008da:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4008dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4008e2:	d0fb      	beq.n	4008dc <pmc_sleep+0x1dc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008e4:	4a11      	ldr	r2, [pc, #68]	; (40092c <pmc_sleep+0x22c>)
  4008e6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4008e8:	4b18      	ldr	r3, [pc, #96]	; (40094c <pmc_sleep+0x24c>)
  4008ea:	400b      	ands	r3, r1
  4008ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008f0:	6213      	str	r3, [r2, #32]
  4008f2:	e78c      	b.n	40080e <pmc_sleep+0x10e>
	uint32_t pll_sr = 0;
  4008f4:	2100      	movs	r1, #0
  4008f6:	e793      	b.n	400820 <pmc_sleep+0x120>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4008f8:	4a08      	ldr	r2, [pc, #32]	; (40091c <pmc_sleep+0x21c>)
  4008fa:	6913      	ldr	r3, [r2, #16]
  4008fc:	f043 0304 	orr.w	r3, r3, #4
  400900:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400902:	4a19      	ldr	r2, [pc, #100]	; (400968 <pmc_sleep+0x268>)
  400904:	4b19      	ldr	r3, [pc, #100]	; (40096c <pmc_sleep+0x26c>)
  400906:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400908:	2201      	movs	r2, #1
  40090a:	4b05      	ldr	r3, [pc, #20]	; (400920 <pmc_sleep+0x220>)
  40090c:	701a      	strb	r2, [r3, #0]
  40090e:	f3bf 8f5f 	dmb	sy
  400912:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400914:	bf30      	wfi
  400916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40091a:	bf00      	nop
  40091c:	e000ed00 	.word	0xe000ed00
  400920:	2040000a 	.word	0x2040000a
  400924:	004006b1 	.word	0x004006b1
  400928:	20400ce4 	.word	0x20400ce4
  40092c:	400e0600 	.word	0x400e0600
  400930:	400e0c00 	.word	0x400e0c00
  400934:	00370008 	.word	0x00370008
  400938:	0040063d 	.word	0x0040063d
  40093c:	fec8ffff 	.word	0xfec8ffff
  400940:	004006b5 	.word	0x004006b5
  400944:	fec8fffc 	.word	0xfec8fffc
  400948:	01370002 	.word	0x01370002
  40094c:	ffc8ff87 	.word	0xffc8ff87
  400950:	07ff0000 	.word	0x07ff0000
  400954:	20400ce8 	.word	0x20400ce8
  400958:	ffc8fffe 	.word	0xffc8fffe
  40095c:	ffc8fffc 	.word	0xffc8fffc
  400960:	00370001 	.word	0x00370001
  400964:	01370000 	.word	0x01370000
  400968:	a5000004 	.word	0xa5000004
  40096c:	400e1810 	.word	0x400e1810

00400970 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400970:	e7fe      	b.n	400970 <Dummy_Handler>
	...

00400974 <Reset_Handler>:
{
  400974:	b500      	push	{lr}
  400976:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400978:	4b25      	ldr	r3, [pc, #148]	; (400a10 <Reset_Handler+0x9c>)
  40097a:	4a26      	ldr	r2, [pc, #152]	; (400a14 <Reset_Handler+0xa0>)
  40097c:	429a      	cmp	r2, r3
  40097e:	d010      	beq.n	4009a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400980:	4b25      	ldr	r3, [pc, #148]	; (400a18 <Reset_Handler+0xa4>)
  400982:	4a23      	ldr	r2, [pc, #140]	; (400a10 <Reset_Handler+0x9c>)
  400984:	429a      	cmp	r2, r3
  400986:	d20c      	bcs.n	4009a2 <Reset_Handler+0x2e>
  400988:	3b01      	subs	r3, #1
  40098a:	1a9b      	subs	r3, r3, r2
  40098c:	f023 0303 	bic.w	r3, r3, #3
  400990:	3304      	adds	r3, #4
  400992:	4413      	add	r3, r2
  400994:	491f      	ldr	r1, [pc, #124]	; (400a14 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400996:	f851 0b04 	ldr.w	r0, [r1], #4
  40099a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40099e:	429a      	cmp	r2, r3
  4009a0:	d1f9      	bne.n	400996 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4009a2:	4b1e      	ldr	r3, [pc, #120]	; (400a1c <Reset_Handler+0xa8>)
  4009a4:	4a1e      	ldr	r2, [pc, #120]	; (400a20 <Reset_Handler+0xac>)
  4009a6:	429a      	cmp	r2, r3
  4009a8:	d20a      	bcs.n	4009c0 <Reset_Handler+0x4c>
  4009aa:	3b01      	subs	r3, #1
  4009ac:	1a9b      	subs	r3, r3, r2
  4009ae:	f023 0303 	bic.w	r3, r3, #3
  4009b2:	3304      	adds	r3, #4
  4009b4:	4413      	add	r3, r2
                *pDest++ = 0;
  4009b6:	2100      	movs	r1, #0
  4009b8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009bc:	4293      	cmp	r3, r2
  4009be:	d1fb      	bne.n	4009b8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009c0:	4a18      	ldr	r2, [pc, #96]	; (400a24 <Reset_Handler+0xb0>)
  4009c2:	4b19      	ldr	r3, [pc, #100]	; (400a28 <Reset_Handler+0xb4>)
  4009c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009c8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4009ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009ce:	fab3 f383 	clz	r3, r3
  4009d2:	095b      	lsrs	r3, r3, #5
  4009d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009d6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4009d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009dc:	2200      	movs	r2, #0
  4009de:	4b13      	ldr	r3, [pc, #76]	; (400a2c <Reset_Handler+0xb8>)
  4009e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4009e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009e4:	4a12      	ldr	r2, [pc, #72]	; (400a30 <Reset_Handler+0xbc>)
  4009e6:	6813      	ldr	r3, [r2, #0]
  4009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4009ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4009ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009f6:	b129      	cbz	r1, 400a04 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009f8:	2201      	movs	r2, #1
  4009fa:	4b0c      	ldr	r3, [pc, #48]	; (400a2c <Reset_Handler+0xb8>)
  4009fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4009fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a02:	b662      	cpsie	i
        __libc_init_array();
  400a04:	4b0b      	ldr	r3, [pc, #44]	; (400a34 <Reset_Handler+0xc0>)
  400a06:	4798      	blx	r3
        main();
  400a08:	4b0b      	ldr	r3, [pc, #44]	; (400a38 <Reset_Handler+0xc4>)
  400a0a:	4798      	blx	r3
  400a0c:	e7fe      	b.n	400a0c <Reset_Handler+0x98>
  400a0e:	bf00      	nop
  400a10:	20400000 	.word	0x20400000
  400a14:	00401f88 	.word	0x00401f88
  400a18:	20400c54 	.word	0x20400c54
  400a1c:	20400d14 	.word	0x20400d14
  400a20:	20400c54 	.word	0x20400c54
  400a24:	e000ed00 	.word	0xe000ed00
  400a28:	00400000 	.word	0x00400000
  400a2c:	2040000a 	.word	0x2040000a
  400a30:	e000ed88 	.word	0xe000ed88
  400a34:	00401de9 	.word	0x00401de9
  400a38:	00401061 	.word	0x00401061

00400a3c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a3c:	4b3b      	ldr	r3, [pc, #236]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a40:	f003 0303 	and.w	r3, r3, #3
  400a44:	2b01      	cmp	r3, #1
  400a46:	d01d      	beq.n	400a84 <SystemCoreClockUpdate+0x48>
  400a48:	b183      	cbz	r3, 400a6c <SystemCoreClockUpdate+0x30>
  400a4a:	2b02      	cmp	r3, #2
  400a4c:	d036      	beq.n	400abc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a4e:	4b37      	ldr	r3, [pc, #220]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a56:	2b70      	cmp	r3, #112	; 0x70
  400a58:	d05f      	beq.n	400b1a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a5a:	4b34      	ldr	r3, [pc, #208]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a5e:	4934      	ldr	r1, [pc, #208]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400a60:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a64:	680b      	ldr	r3, [r1, #0]
  400a66:	40d3      	lsrs	r3, r2
  400a68:	600b      	str	r3, [r1, #0]
  400a6a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400a6c:	4b31      	ldr	r3, [pc, #196]	; (400b34 <SystemCoreClockUpdate+0xf8>)
  400a6e:	695b      	ldr	r3, [r3, #20]
  400a70:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a74:	bf14      	ite	ne
  400a76:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a7a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a7e:	4b2c      	ldr	r3, [pc, #176]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400a80:	601a      	str	r2, [r3, #0]
  400a82:	e7e4      	b.n	400a4e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a84:	4b29      	ldr	r3, [pc, #164]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400a86:	6a1b      	ldr	r3, [r3, #32]
  400a88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a8c:	d003      	beq.n	400a96 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a8e:	4a2a      	ldr	r2, [pc, #168]	; (400b38 <SystemCoreClockUpdate+0xfc>)
  400a90:	4b27      	ldr	r3, [pc, #156]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400a92:	601a      	str	r2, [r3, #0]
  400a94:	e7db      	b.n	400a4e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a96:	4a29      	ldr	r2, [pc, #164]	; (400b3c <SystemCoreClockUpdate+0x100>)
  400a98:	4b25      	ldr	r3, [pc, #148]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400a9a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a9c:	4b23      	ldr	r3, [pc, #140]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400a9e:	6a1b      	ldr	r3, [r3, #32]
  400aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400aa4:	2b10      	cmp	r3, #16
  400aa6:	d005      	beq.n	400ab4 <SystemCoreClockUpdate+0x78>
  400aa8:	2b20      	cmp	r3, #32
  400aaa:	d1d0      	bne.n	400a4e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400aac:	4a22      	ldr	r2, [pc, #136]	; (400b38 <SystemCoreClockUpdate+0xfc>)
  400aae:	4b20      	ldr	r3, [pc, #128]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400ab0:	601a      	str	r2, [r3, #0]
          break;
  400ab2:	e7cc      	b.n	400a4e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ab4:	4a22      	ldr	r2, [pc, #136]	; (400b40 <SystemCoreClockUpdate+0x104>)
  400ab6:	4b1e      	ldr	r3, [pc, #120]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400ab8:	601a      	str	r2, [r3, #0]
          break;
  400aba:	e7c8      	b.n	400a4e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400abc:	4b1b      	ldr	r3, [pc, #108]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400abe:	6a1b      	ldr	r3, [r3, #32]
  400ac0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ac4:	d016      	beq.n	400af4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ac6:	4a1c      	ldr	r2, [pc, #112]	; (400b38 <SystemCoreClockUpdate+0xfc>)
  400ac8:	4b19      	ldr	r3, [pc, #100]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400aca:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400acc:	4b17      	ldr	r3, [pc, #92]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ad0:	f003 0303 	and.w	r3, r3, #3
  400ad4:	2b02      	cmp	r3, #2
  400ad6:	d1ba      	bne.n	400a4e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ad8:	4a14      	ldr	r2, [pc, #80]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400ada:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400adc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ade:	4814      	ldr	r0, [pc, #80]	; (400b30 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ae0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ae4:	6803      	ldr	r3, [r0, #0]
  400ae6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400aea:	b2d2      	uxtb	r2, r2
  400aec:	fbb3 f3f2 	udiv	r3, r3, r2
  400af0:	6003      	str	r3, [r0, #0]
  400af2:	e7ac      	b.n	400a4e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400af4:	4a11      	ldr	r2, [pc, #68]	; (400b3c <SystemCoreClockUpdate+0x100>)
  400af6:	4b0e      	ldr	r3, [pc, #56]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400af8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400afa:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <SystemCoreClockUpdate+0xf0>)
  400afc:	6a1b      	ldr	r3, [r3, #32]
  400afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b02:	2b10      	cmp	r3, #16
  400b04:	d005      	beq.n	400b12 <SystemCoreClockUpdate+0xd6>
  400b06:	2b20      	cmp	r3, #32
  400b08:	d1e0      	bne.n	400acc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400b0a:	4a0b      	ldr	r2, [pc, #44]	; (400b38 <SystemCoreClockUpdate+0xfc>)
  400b0c:	4b08      	ldr	r3, [pc, #32]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400b0e:	601a      	str	r2, [r3, #0]
          break;
  400b10:	e7dc      	b.n	400acc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400b12:	4a0b      	ldr	r2, [pc, #44]	; (400b40 <SystemCoreClockUpdate+0x104>)
  400b14:	4b06      	ldr	r3, [pc, #24]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400b16:	601a      	str	r2, [r3, #0]
          break;
  400b18:	e7d8      	b.n	400acc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400b1a:	4a05      	ldr	r2, [pc, #20]	; (400b30 <SystemCoreClockUpdate+0xf4>)
  400b1c:	6813      	ldr	r3, [r2, #0]
  400b1e:	4909      	ldr	r1, [pc, #36]	; (400b44 <SystemCoreClockUpdate+0x108>)
  400b20:	fba1 1303 	umull	r1, r3, r1, r3
  400b24:	085b      	lsrs	r3, r3, #1
  400b26:	6013      	str	r3, [r2, #0]
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	400e0600 	.word	0x400e0600
  400b30:	2040000c 	.word	0x2040000c
  400b34:	400e1810 	.word	0x400e1810
  400b38:	00b71b00 	.word	0x00b71b00
  400b3c:	003d0900 	.word	0x003d0900
  400b40:	007a1200 	.word	0x007a1200
  400b44:	aaaaaaab 	.word	0xaaaaaaab

00400b48 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b48:	4b12      	ldr	r3, [pc, #72]	; (400b94 <system_init_flash+0x4c>)
  400b4a:	4298      	cmp	r0, r3
  400b4c:	d911      	bls.n	400b72 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b4e:	4b12      	ldr	r3, [pc, #72]	; (400b98 <system_init_flash+0x50>)
  400b50:	4298      	cmp	r0, r3
  400b52:	d913      	bls.n	400b7c <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b54:	4b11      	ldr	r3, [pc, #68]	; (400b9c <system_init_flash+0x54>)
  400b56:	4298      	cmp	r0, r3
  400b58:	d914      	bls.n	400b84 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b5a:	4b11      	ldr	r3, [pc, #68]	; (400ba0 <system_init_flash+0x58>)
  400b5c:	4298      	cmp	r0, r3
  400b5e:	d915      	bls.n	400b8c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b60:	4b10      	ldr	r3, [pc, #64]	; (400ba4 <system_init_flash+0x5c>)
  400b62:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b64:	bf94      	ite	ls
  400b66:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b6a:	4a0f      	ldrhi	r2, [pc, #60]	; (400ba8 <system_init_flash+0x60>)
  400b6c:	4b0f      	ldr	r3, [pc, #60]	; (400bac <system_init_flash+0x64>)
  400b6e:	601a      	str	r2, [r3, #0]
  400b70:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b76:	4b0d      	ldr	r3, [pc, #52]	; (400bac <system_init_flash+0x64>)
  400b78:	601a      	str	r2, [r3, #0]
  400b7a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b7c:	4a0c      	ldr	r2, [pc, #48]	; (400bb0 <system_init_flash+0x68>)
  400b7e:	4b0b      	ldr	r3, [pc, #44]	; (400bac <system_init_flash+0x64>)
  400b80:	601a      	str	r2, [r3, #0]
  400b82:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b84:	4a0b      	ldr	r2, [pc, #44]	; (400bb4 <system_init_flash+0x6c>)
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <system_init_flash+0x64>)
  400b88:	601a      	str	r2, [r3, #0]
  400b8a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b8c:	4a0a      	ldr	r2, [pc, #40]	; (400bb8 <system_init_flash+0x70>)
  400b8e:	4b07      	ldr	r3, [pc, #28]	; (400bac <system_init_flash+0x64>)
  400b90:	601a      	str	r2, [r3, #0]
  400b92:	4770      	bx	lr
  400b94:	01312cff 	.word	0x01312cff
  400b98:	026259ff 	.word	0x026259ff
  400b9c:	039386ff 	.word	0x039386ff
  400ba0:	04c4b3ff 	.word	0x04c4b3ff
  400ba4:	05f5e0ff 	.word	0x05f5e0ff
  400ba8:	04000500 	.word	0x04000500
  400bac:	400e0c00 	.word	0x400e0c00
  400bb0:	04000100 	.word	0x04000100
  400bb4:	04000200 	.word	0x04000200
  400bb8:	04000300 	.word	0x04000300

00400bbc <pausaMusica>:
volatile char comp;
volatile char musica;

void pausaMusica(void)
{
	pause = 1;
  400bbc:	2201      	movs	r2, #1
  400bbe:	4b01      	ldr	r3, [pc, #4]	; (400bc4 <pausaMusica+0x8>)
  400bc0:	701a      	strb	r2, [r3, #0]
  400bc2:	4770      	bx	lr
  400bc4:	20400cec 	.word	0x20400cec

00400bc8 <alteraMusica>:
}

void alteraMusica(void){

	if (musica == 2){
  400bc8:	4b07      	ldr	r3, [pc, #28]	; (400be8 <alteraMusica+0x20>)
  400bca:	781b      	ldrb	r3, [r3, #0]
  400bcc:	b2db      	uxtb	r3, r3
  400bce:	2b02      	cmp	r3, #2
  400bd0:	d005      	beq.n	400bde <alteraMusica+0x16>
		musica = 0;
	}
	else{
		musica += 1;
  400bd2:	4a05      	ldr	r2, [pc, #20]	; (400be8 <alteraMusica+0x20>)
  400bd4:	7813      	ldrb	r3, [r2, #0]
  400bd6:	3301      	adds	r3, #1
  400bd8:	b2db      	uxtb	r3, r3
  400bda:	7013      	strb	r3, [r2, #0]
  400bdc:	4770      	bx	lr
		musica = 0;
  400bde:	2200      	movs	r2, #0
  400be0:	4b01      	ldr	r3, [pc, #4]	; (400be8 <alteraMusica+0x20>)
  400be2:	701a      	strb	r2, [r3, #0]
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	20400cee 	.word	0x20400cee

00400bec <init>:
/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC
void init(void){
  400bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400bf0:	b082      	sub	sp, #8
	// Initialize the board clock
	sysclk_init();
  400bf2:	4b5f      	ldr	r3, [pc, #380]	; (400d70 <init+0x184>)
  400bf4:	4798      	blx	r3

	// Disativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bfa:	4b5e      	ldr	r3, [pc, #376]	; (400d74 <init+0x188>)
  400bfc:	605a      	str	r2, [r3, #4]

	// Ativa os PIOs que estão conectados (LEDs e BUZZER)
	pmc_enable_periph_clk(LED_PIO_ID);
  400bfe:	200c      	movs	r0, #12
  400c00:	4d5d      	ldr	r5, [pc, #372]	; (400d78 <init+0x18c>)
  400c02:	47a8      	blx	r5
	pmc_enable_periph_clk(BUZZ_PIO_ID);
  400c04:	200a      	movs	r0, #10
  400c06:	47a8      	blx	r5

	pmc_enable_periph_clk(LED1_PIO_ID);
  400c08:	200c      	movs	r0, #12
  400c0a:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_IDX_MASK, PIO_DEFAULT);
  400c0c:	f8df 9198 	ldr.w	r9, [pc, #408]	; 400da8 <init+0x1bc>
  400c10:	2300      	movs	r3, #0
  400c12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400c16:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400c1a:	4648      	mov	r0, r9
  400c1c:	4f57      	ldr	r7, [pc, #348]	; (400d7c <init+0x190>)
  400c1e:	47b8      	blx	r7

	pmc_enable_periph_clk(LED2_PIO_ID);
  400c20:	2010      	movs	r0, #16
  400c22:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_IDX_MASK, PIO_DEFAULT);
  400c24:	f8df 8184 	ldr.w	r8, [pc, #388]	; 400dac <init+0x1c0>
  400c28:	2300      	movs	r3, #0
  400c2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c2e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400c32:	4640      	mov	r0, r8
  400c34:	47b8      	blx	r7

	pmc_enable_periph_clk(LED3_PIO_ID);
  400c36:	2010      	movs	r0, #16
  400c38:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_IDX_MASK, PIO_DEFAULT);
  400c3a:	2300      	movs	r3, #0
  400c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400c40:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400c44:	4640      	mov	r0, r8
  400c46:	47b8      	blx	r7

	//Inicializa PC8 e PA19 como saída
	pio_set_output(LED_PIO, LED_IDX_MASK, 0, 0, 0);
  400c48:	2400      	movs	r4, #0
  400c4a:	9400      	str	r4, [sp, #0]
  400c4c:	4623      	mov	r3, r4
  400c4e:	4622      	mov	r2, r4
  400c50:	f44f 7180 	mov.w	r1, #256	; 0x100
  400c54:	4648      	mov	r0, r9
  400c56:	f8df a158 	ldr.w	sl, [pc, #344]	; 400db0 <init+0x1c4>
  400c5a:	47d0      	blx	sl
	pio_set_output(LED1_PIO, LED_IDX_MASK, 0, 0, 0);
  400c5c:	9400      	str	r4, [sp, #0]
  400c5e:	4623      	mov	r3, r4
  400c60:	4622      	mov	r2, r4
  400c62:	f44f 7180 	mov.w	r1, #256	; 0x100
  400c66:	4648      	mov	r0, r9
  400c68:	47d0      	blx	sl
	pio_set_output(LED2_PIO, LED_IDX_MASK, 1, 0, 0);
  400c6a:	9400      	str	r4, [sp, #0]
  400c6c:	4623      	mov	r3, r4
  400c6e:	2201      	movs	r2, #1
  400c70:	f44f 7180 	mov.w	r1, #256	; 0x100
  400c74:	4640      	mov	r0, r8
  400c76:	47d0      	blx	sl
	pio_set_output(LED3_PIO, LED_IDX_MASK, 0, 0, 0);
  400c78:	9400      	str	r4, [sp, #0]
  400c7a:	4623      	mov	r3, r4
  400c7c:	4622      	mov	r2, r4
  400c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400c82:	4640      	mov	r0, r8
  400c84:	47d0      	blx	sl
	pio_set_output(BUZZ_PIO, BUZZ_IDX_MASK, 0, 0, 0);
  400c86:	4e3e      	ldr	r6, [pc, #248]	; (400d80 <init+0x194>)
  400c88:	9400      	str	r4, [sp, #0]
  400c8a:	4623      	mov	r3, r4
  400c8c:	4622      	mov	r2, r4
  400c8e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c92:	4630      	mov	r0, r6
  400c94:	47d0      	blx	sl
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  400c96:	200a      	movs	r0, #10
  400c98:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT1_PIO_ID);
  400c9a:	200a      	movs	r0, #10
  400c9c:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT2_PIO_ID);
  400c9e:	2010      	movs	r0, #16
  400ca0:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT3_PIO_ID);
  400ca2:	200c      	movs	r0, #12
  400ca4:	47a8      	blx	r5
	
	// configura pino ligado ao botão como entrada com um pull-up.
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  400ca6:	2309      	movs	r3, #9
  400ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400cac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400cb0:	4630      	mov	r0, r6
  400cb2:	47b8      	blx	r7
  	pio_set_debounce_filter(BUT_PIO, BUT_IDX_MASK, 50);
  400cb4:	2232      	movs	r2, #50	; 0x32
  400cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400cba:	4630      	mov	r0, r6
  400cbc:	4d31      	ldr	r5, [pc, #196]	; (400d84 <init+0x198>)
  400cbe:	47a8      	blx	r5

	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  400cc0:	2309      	movs	r3, #9
  400cc2:	2204      	movs	r2, #4
  400cc4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400cc8:	4630      	mov	r0, r6
  400cca:	47b8      	blx	r7
	pio_set_debounce_filter(BUT1_PIO, BUT1_IDX_MASK, 50);
  400ccc:	2232      	movs	r2, #50	; 0x32
  400cce:	2104      	movs	r1, #4
  400cd0:	4630      	mov	r0, r6
  400cd2:	47a8      	blx	r5
	
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  400cd4:	2309      	movs	r3, #9
  400cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400cda:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400cde:	4640      	mov	r0, r8
  400ce0:	47b8      	blx	r7
	pio_set_debounce_filter(BUT2_PIO, BUT2_IDX_MASK, 50);
  400ce2:	2232      	movs	r2, #50	; 0x32
  400ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ce8:	4640      	mov	r0, r8
  400cea:	47a8      	blx	r5
	
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  400cec:	2309      	movs	r3, #9
  400cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cf2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400cf6:	4648      	mov	r0, r9
  400cf8:	47b8      	blx	r7
	pio_set_debounce_filter(BUT3_PIO, BUT3_IDX_MASK, 50);
  400cfa:	2232      	movs	r2, #50	; 0x32
  400cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400d00:	4648      	mov	r0, r9
  400d02:	47a8      	blx	r5
	
	// Ativa interrupção
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  400d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400d08:	4630      	mov	r0, r6
  400d0a:	4d1f      	ldr	r5, [pc, #124]	; (400d88 <init+0x19c>)
  400d0c:	47a8      	blx	r5
	pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  400d0e:	2104      	movs	r1, #4
  400d10:	4630      	mov	r0, r6
  400d12:	47a8      	blx	r5
	pio_enable_interrupt(BUT2_PIO, BUT2_IDX_MASK);
  400d14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d18:	4640      	mov	r0, r8
  400d1a:	47a8      	blx	r5
	pio_enable_interrupt(BUT3_PIO, BUT3_IDX_MASK);
  400d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400d20:	4648      	mov	r0, r9
  400d22:	47a8      	blx	r5

	// Configura interrupção no pino referente ao botao e associa
	// função de callback caso uma interrupção for gerada
	// a função de callback é a: pausaMusica()
	pio_handler_set(BUT1_PIO,
  400d24:	4b19      	ldr	r3, [pc, #100]	; (400d8c <init+0x1a0>)
  400d26:	9300      	str	r3, [sp, #0]
  400d28:	2370      	movs	r3, #112	; 0x70
  400d2a:	2204      	movs	r2, #4
  400d2c:	210a      	movs	r1, #10
  400d2e:	4630      	mov	r0, r6
  400d30:	4d17      	ldr	r5, [pc, #92]	; (400d90 <init+0x1a4>)
  400d32:	47a8      	blx	r5
					BUT1_PIO_ID,
					BUT1_IDX_MASK,
					PIO_IT_RISE_EDGE,
					pausaMusica);

	pio_handler_set(BUT3_PIO,
  400d34:	4b17      	ldr	r3, [pc, #92]	; (400d94 <init+0x1a8>)
  400d36:	9300      	str	r3, [sp, #0]
  400d38:	2370      	movs	r3, #112	; 0x70
  400d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400d3e:	210c      	movs	r1, #12
  400d40:	4648      	mov	r0, r9
  400d42:	47a8      	blx	r5
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d44:	4b14      	ldr	r3, [pc, #80]	; (400d98 <init+0x1ac>)
  400d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400d4a:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400d4c:	2240      	movs	r2, #64	; 0x40
  400d4e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400d56:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400d58:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	NVIC_EnableIRQ(BUT1_PIO_ID);
	NVIC_SetPriority(BUT1_PIO_ID, 2); // Prioridade 2
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, 2); // Prioridade 2
	
	pause = 0;
  400d5c:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <init+0x1b0>)
  400d5e:	701c      	strb	r4, [r3, #0]
	comp = 0;
  400d60:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <init+0x1b4>)
  400d62:	701c      	strb	r4, [r3, #0]
	musica = 0;
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <init+0x1b8>)
  400d66:	701c      	strb	r4, [r3, #0]
	
}
  400d68:	b002      	add	sp, #8
  400d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d6e:	bf00      	nop
  400d70:	004001ad 	.word	0x004001ad
  400d74:	400e1850 	.word	0x400e1850
  400d78:	0040065d 	.word	0x0040065d
  400d7c:	00400349 	.word	0x00400349
  400d80:	400e0e00 	.word	0x400e0e00
  400d84:	0040021d 	.word	0x0040021d
  400d88:	0040040b 	.word	0x0040040b
  400d8c:	00400bbd 	.word	0x00400bbd
  400d90:	00400469 	.word	0x00400469
  400d94:	00400bc9 	.word	0x00400bc9
  400d98:	e000e100 	.word	0xe000e100
  400d9c:	20400cec 	.word	0x20400cec
  400da0:	20400ced 	.word	0x20400ced
  400da4:	20400cee 	.word	0x20400cee
  400da8:	400e1200 	.word	0x400e1200
  400dac:	400e1400 	.word	0x400e1400
  400db0:	00400321 	.word	0x00400321
  400db4:	00000000 	.word	0x00000000

00400db8 <tocarMusica>:

// função para tocar musica. chamada para tocar musicas diferentes

void tocarMusica(int tempo, int melody[], int n_notas){ 
  400db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dbc:	ed2d 8b02 	vpush	{d8}
  400dc0:	b087      	sub	sp, #28

	// this calculates the duration of a whole note in ms
	int wholenote = (60000 * 4) / tempo;
  400dc2:	4b8d      	ldr	r3, [pc, #564]	; (400ff8 <tocarMusica+0x240>)
  400dc4:	fb93 f3f0 	sdiv	r3, r3, r0
  400dc8:	9305      	str	r3, [sp, #20]
	int divider = 0;
	float noteDuration = 0;

	// iterate over the notes of the song.
	// Remember, the array is twice the number of notes (notes + durations)
	for (int thisNote = 0; thisNote < n_notas; thisNote += 2) {
  400dca:	2a00      	cmp	r2, #0
  400dcc:	dd13      	ble.n	400df6 <tocarMusica+0x3e>
  400dce:	9204      	str	r2, [sp, #16]
  400dd0:	f101 0b04 	add.w	fp, r1, #4
  400dd4:	2600      	movs	r6, #0
  400dd6:	eddf 8a89 	vldr	s17, [pc, #548]	; 400ffc <tocarMusica+0x244>

		else{
			for (int x = 0; x < 1000*toca*0.9; x++){     //*0.9 para tocar somente 90% do tempo da nota
				pio_clear(PIOD, LED2_IDX_MASK);       
				pio_set(PIOA, BUZZ_IDX_MASK);       
				delay_us(pwm/2.0);
  400dda:	46b2      	mov	sl, r6
  400ddc:	e042      	b.n	400e64 <tocarMusica+0xac>
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400dde:	2002      	movs	r0, #2
  400de0:	4b87      	ldr	r3, [pc, #540]	; (401000 <tocarMusica+0x248>)
  400de2:	4798      	blx	r3
			pause = 0;
  400de4:	2200      	movs	r2, #0
  400de6:	4b87      	ldr	r3, [pc, #540]	; (401004 <tocarMusica+0x24c>)
  400de8:	701a      	strb	r2, [r3, #0]
  400dea:	e03f      	b.n	400e6c <tocarMusica+0xb4>
			comp = musica;
  400dec:	4b86      	ldr	r3, [pc, #536]	; (401008 <tocarMusica+0x250>)
  400dee:	781b      	ldrb	r3, [r3, #0]
  400df0:	b2db      	uxtb	r3, r3
  400df2:	4a86      	ldr	r2, [pc, #536]	; (40100c <tocarMusica+0x254>)
  400df4:	7013      	strb	r3, [r2, #0]
			}	
			
			delay_ms(1000*toca*0.1);                    // 10% de pausa para diferenciar notas iguais
		}
	}
}
  400df6:	b007      	add	sp, #28
  400df8:	ecbd 8b02 	vpop	{d8}
  400dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (divider < 0) {
  400e00:	2b00      	cmp	r3, #0
  400e02:	da46      	bge.n	400e92 <tocarMusica+0xda>
		noteDuration = (wholenote) / abs(divider);
  400e04:	2b00      	cmp	r3, #0
  400e06:	bfb8      	it	lt
  400e08:	425b      	neglt	r3, r3
  400e0a:	9905      	ldr	r1, [sp, #20]
  400e0c:	fb91 f3f3 	sdiv	r3, r1, r3
  400e10:	ee07 3a90 	vmov	s15, r3
  400e14:	eef8 8ae7 	vcvt.f32.s32	s17, s15
		noteDuration *= 1.5; // increases the duration in half for dotted notes
  400e18:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  400e1c:	ee68 8aa7 	vmul.f32	s17, s17, s15
  400e20:	e037      	b.n	400e92 <tocarMusica+0xda>
			delay_ms(noteDuration);
  400e22:	eef5 8a40 	vcmp.f32	s17, #0.0
  400e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400e2a:	d05a      	beq.n	400ee2 <tocarMusica+0x12a>
  400e2c:	ee18 0a90 	vmov	r0, s17
  400e30:	4b77      	ldr	r3, [pc, #476]	; (401010 <tocarMusica+0x258>)
  400e32:	4798      	blx	r3
  400e34:	4b77      	ldr	r3, [pc, #476]	; (401014 <tocarMusica+0x25c>)
  400e36:	fba0 4503 	umull	r4, r5, r0, r3
  400e3a:	fb03 5501 	mla	r5, r3, r1, r5
  400e3e:	f241 722c 	movw	r2, #5932	; 0x172c
  400e42:	2300      	movs	r3, #0
  400e44:	f241 702b 	movw	r0, #5931	; 0x172b
  400e48:	2100      	movs	r1, #0
  400e4a:	1900      	adds	r0, r0, r4
  400e4c:	4169      	adcs	r1, r5
  400e4e:	4c72      	ldr	r4, [pc, #456]	; (401018 <tocarMusica+0x260>)
  400e50:	47a0      	blx	r4
  400e52:	4b72      	ldr	r3, [pc, #456]	; (40101c <tocarMusica+0x264>)
  400e54:	4798      	blx	r3
	for (int thisNote = 0; thisNote < n_notas; thisNote += 2) {
  400e56:	f10a 0a02 	add.w	sl, sl, #2
  400e5a:	f10b 0b08 	add.w	fp, fp, #8
  400e5e:	9b04      	ldr	r3, [sp, #16]
  400e60:	4553      	cmp	r3, sl
  400e62:	ddc8      	ble.n	400df6 <tocarMusica+0x3e>
		if(pause){
  400e64:	4b67      	ldr	r3, [pc, #412]	; (401004 <tocarMusica+0x24c>)
  400e66:	781b      	ldrb	r3, [r3, #0]
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d1b8      	bne.n	400dde <tocarMusica+0x26>
		if(musica != comp){
  400e6c:	4b66      	ldr	r3, [pc, #408]	; (401008 <tocarMusica+0x250>)
  400e6e:	781b      	ldrb	r3, [r3, #0]
  400e70:	4a66      	ldr	r2, [pc, #408]	; (40100c <tocarMusica+0x254>)
  400e72:	7812      	ldrb	r2, [r2, #0]
  400e74:	b2db      	uxtb	r3, r3
  400e76:	4293      	cmp	r3, r2
  400e78:	d1b8      	bne.n	400dec <tocarMusica+0x34>
  400e7a:	465a      	mov	r2, fp
		divider = melody[thisNote + 1];
  400e7c:	f8db 3000 	ldr.w	r3, [fp]
		if (divider > 0) {
  400e80:	2b00      	cmp	r3, #0
  400e82:	ddbd      	ble.n	400e00 <tocarMusica+0x48>
		noteDuration = (wholenote) / divider;
  400e84:	9905      	ldr	r1, [sp, #20]
  400e86:	fb91 f3f3 	sdiv	r3, r1, r3
  400e8a:	ee08 3a90 	vmov	s17, r3
  400e8e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
		float pwm = 1000000/melody[thisNote];
  400e92:	f852 3c04 	ldr.w	r3, [r2, #-4]
		if (melody[thisNote] == 0){
  400e96:	2b00      	cmp	r3, #0
  400e98:	d0c3      	beq.n	400e22 <tocarMusica+0x6a>
		float pwm = 1000000/melody[thisNote];
  400e9a:	4a61      	ldr	r2, [pc, #388]	; (401020 <tocarMusica+0x268>)
  400e9c:	fb92 f3f3 	sdiv	r3, r2, r3
  400ea0:	ee07 3a90 	vmov	s15, r3
  400ea4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		float toca = noteDuration/pwm;
  400ea8:	ee88 7a88 	vdiv.f32	s14, s17, s16
			for (int x = 0; x < 1000*toca*0.9; x++){     //*0.9 para tocar somente 90% do tempo da nota
  400eac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 401024 <tocarMusica+0x26c>
  400eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
  400eb4:	ee17 0a90 	vmov	r0, s15
  400eb8:	4b5b      	ldr	r3, [pc, #364]	; (401028 <tocarMusica+0x270>)
  400eba:	4798      	blx	r3
  400ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400ec0:	a349      	add	r3, pc, #292	; (adr r3, 400fe8 <tocarMusica+0x230>)
  400ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ec6:	4c59      	ldr	r4, [pc, #356]	; (40102c <tocarMusica+0x274>)
  400ec8:	47a0      	blx	r4
  400eca:	e9cd 0100 	strd	r0, r1, [sp]
  400ece:	2200      	movs	r2, #0
  400ed0:	2300      	movs	r3, #0
  400ed2:	4c57      	ldr	r4, [pc, #348]	; (401030 <tocarMusica+0x278>)
  400ed4:	47a0      	blx	r4
  400ed6:	2800      	cmp	r0, #0
  400ed8:	d05c      	beq.n	400f94 <tocarMusica+0x1dc>
  400eda:	2400      	movs	r4, #0
				pio_clear(PIOD, LED2_IDX_MASK);       
  400edc:	4d55      	ldr	r5, [pc, #340]	; (401034 <tocarMusica+0x27c>)
				delay_us(pwm/2.0);
  400ede:	4e4d      	ldr	r6, [pc, #308]	; (401014 <tocarMusica+0x25c>)
  400ee0:	e01c      	b.n	400f1c <tocarMusica+0x164>
			delay_ms(noteDuration);
  400ee2:	2033      	movs	r0, #51	; 0x33
  400ee4:	4b4d      	ldr	r3, [pc, #308]	; (40101c <tocarMusica+0x264>)
  400ee6:	4798      	blx	r3
  400ee8:	e7b5      	b.n	400e56 <tocarMusica+0x9e>
				delay_us(pwm/2.0);
  400eea:	2033      	movs	r0, #51	; 0x33
  400eec:	4f4b      	ldr	r7, [pc, #300]	; (40101c <tocarMusica+0x264>)
  400eee:	47b8      	blx	r7
				pio_set(PIOD, LED2_IDX_MASK);
  400ef0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400ef4:	4628      	mov	r0, r5
  400ef6:	4b50      	ldr	r3, [pc, #320]	; (401038 <tocarMusica+0x280>)
  400ef8:	4798      	blx	r3
				pio_clear(PIOA, BUZZ_IDX_MASK);
  400efa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400efe:	484f      	ldr	r0, [pc, #316]	; (40103c <tocarMusica+0x284>)
  400f00:	4b4f      	ldr	r3, [pc, #316]	; (401040 <tocarMusica+0x288>)
  400f02:	4798      	blx	r3
				delay_us(pwm/2.0);				
  400f04:	2033      	movs	r0, #51	; 0x33
  400f06:	47b8      	blx	r7
			for (int x = 0; x < 1000*toca*0.9; x++){     //*0.9 para tocar somente 90% do tempo da nota
  400f08:	3401      	adds	r4, #1
  400f0a:	4620      	mov	r0, r4
  400f0c:	4b4d      	ldr	r3, [pc, #308]	; (401044 <tocarMusica+0x28c>)
  400f0e:	4798      	blx	r3
  400f10:	e9dd 2300 	ldrd	r2, r3, [sp]
  400f14:	4f4c      	ldr	r7, [pc, #304]	; (401048 <tocarMusica+0x290>)
  400f16:	47b8      	blx	r7
  400f18:	2800      	cmp	r0, #0
  400f1a:	d03b      	beq.n	400f94 <tocarMusica+0x1dc>
				pio_clear(PIOD, LED2_IDX_MASK);       
  400f1c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400f20:	4628      	mov	r0, r5
  400f22:	4b47      	ldr	r3, [pc, #284]	; (401040 <tocarMusica+0x288>)
  400f24:	4798      	blx	r3
				pio_set(PIOA, BUZZ_IDX_MASK);       
  400f26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400f2a:	4844      	ldr	r0, [pc, #272]	; (40103c <tocarMusica+0x284>)
  400f2c:	4b42      	ldr	r3, [pc, #264]	; (401038 <tocarMusica+0x280>)
  400f2e:	4798      	blx	r3
				delay_us(pwm/2.0);
  400f30:	ee18 0a10 	vmov	r0, s16
  400f34:	4b3c      	ldr	r3, [pc, #240]	; (401028 <tocarMusica+0x270>)
  400f36:	4798      	blx	r3
  400f38:	2200      	movs	r2, #0
  400f3a:	4b44      	ldr	r3, [pc, #272]	; (40104c <tocarMusica+0x294>)
  400f3c:	4f3b      	ldr	r7, [pc, #236]	; (40102c <tocarMusica+0x274>)
  400f3e:	47b8      	blx	r7
  400f40:	4680      	mov	r8, r0
  400f42:	4689      	mov	r9, r1
  400f44:	2200      	movs	r2, #0
  400f46:	2300      	movs	r3, #0
  400f48:	4f41      	ldr	r7, [pc, #260]	; (401050 <tocarMusica+0x298>)
  400f4a:	47b8      	blx	r7
  400f4c:	2800      	cmp	r0, #0
  400f4e:	d1cc      	bne.n	400eea <tocarMusica+0x132>
  400f50:	4640      	mov	r0, r8
  400f52:	4649      	mov	r1, r9
  400f54:	4b3f      	ldr	r3, [pc, #252]	; (401054 <tocarMusica+0x29c>)
  400f56:	4798      	blx	r3
  400f58:	fba0 8906 	umull	r8, r9, r0, r6
  400f5c:	fb06 9901 	mla	r9, r6, r1, r9
  400f60:	4a3d      	ldr	r2, [pc, #244]	; (401058 <tocarMusica+0x2a0>)
  400f62:	2300      	movs	r3, #0
  400f64:	483d      	ldr	r0, [pc, #244]	; (40105c <tocarMusica+0x2a4>)
  400f66:	2100      	movs	r1, #0
  400f68:	eb10 0008 	adds.w	r0, r0, r8
  400f6c:	eb41 0109 	adc.w	r1, r1, r9
  400f70:	4f29      	ldr	r7, [pc, #164]	; (401018 <tocarMusica+0x260>)
  400f72:	47b8      	blx	r7
  400f74:	4680      	mov	r8, r0
  400f76:	4f29      	ldr	r7, [pc, #164]	; (40101c <tocarMusica+0x264>)
  400f78:	47b8      	blx	r7
				pio_set(PIOD, LED2_IDX_MASK);
  400f7a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400f7e:	4628      	mov	r0, r5
  400f80:	4b2d      	ldr	r3, [pc, #180]	; (401038 <tocarMusica+0x280>)
  400f82:	4798      	blx	r3
				pio_clear(PIOA, BUZZ_IDX_MASK);
  400f84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400f88:	482c      	ldr	r0, [pc, #176]	; (40103c <tocarMusica+0x284>)
  400f8a:	4b2d      	ldr	r3, [pc, #180]	; (401040 <tocarMusica+0x288>)
  400f8c:	4798      	blx	r3
				delay_us(pwm/2.0);				
  400f8e:	4640      	mov	r0, r8
  400f90:	47b8      	blx	r7
  400f92:	e7b9      	b.n	400f08 <tocarMusica+0x150>
			delay_ms(1000*toca*0.1);                    // 10% de pausa para diferenciar notas iguais
  400f94:	a316      	add	r3, pc, #88	; (adr r3, 400ff0 <tocarMusica+0x238>)
  400f96:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400f9e:	4c23      	ldr	r4, [pc, #140]	; (40102c <tocarMusica+0x274>)
  400fa0:	47a0      	blx	r4
  400fa2:	4604      	mov	r4, r0
  400fa4:	460d      	mov	r5, r1
  400fa6:	2200      	movs	r2, #0
  400fa8:	2300      	movs	r3, #0
  400faa:	4e29      	ldr	r6, [pc, #164]	; (401050 <tocarMusica+0x298>)
  400fac:	47b0      	blx	r6
  400fae:	b9a8      	cbnz	r0, 400fdc <tocarMusica+0x224>
  400fb0:	4620      	mov	r0, r4
  400fb2:	4629      	mov	r1, r5
  400fb4:	4b27      	ldr	r3, [pc, #156]	; (401054 <tocarMusica+0x29c>)
  400fb6:	4798      	blx	r3
  400fb8:	4b16      	ldr	r3, [pc, #88]	; (401014 <tocarMusica+0x25c>)
  400fba:	fba0 4503 	umull	r4, r5, r0, r3
  400fbe:	fb03 5501 	mla	r5, r3, r1, r5
  400fc2:	f241 722c 	movw	r2, #5932	; 0x172c
  400fc6:	2300      	movs	r3, #0
  400fc8:	f241 702b 	movw	r0, #5931	; 0x172b
  400fcc:	2100      	movs	r1, #0
  400fce:	1900      	adds	r0, r0, r4
  400fd0:	4169      	adcs	r1, r5
  400fd2:	4c11      	ldr	r4, [pc, #68]	; (401018 <tocarMusica+0x260>)
  400fd4:	47a0      	blx	r4
  400fd6:	4b11      	ldr	r3, [pc, #68]	; (40101c <tocarMusica+0x264>)
  400fd8:	4798      	blx	r3
  400fda:	e73c      	b.n	400e56 <tocarMusica+0x9e>
  400fdc:	2033      	movs	r0, #51	; 0x33
  400fde:	4b0f      	ldr	r3, [pc, #60]	; (40101c <tocarMusica+0x264>)
  400fe0:	4798      	blx	r3
  400fe2:	e738      	b.n	400e56 <tocarMusica+0x9e>
  400fe4:	f3af 8000 	nop.w
  400fe8:	cccccccd 	.word	0xcccccccd
  400fec:	3feccccc 	.word	0x3feccccc
  400ff0:	9999999a 	.word	0x9999999a
  400ff4:	3fb99999 	.word	0x3fb99999
  400ff8:	0003a980 	.word	0x0003a980
  400ffc:	00000000 	.word	0x00000000
  401000:	00400701 	.word	0x00400701
  401004:	20400cec 	.word	0x20400cec
  401008:	20400cee 	.word	0x20400cee
  40100c:	20400ced 	.word	0x20400ced
  401010:	00401a35 	.word	0x00401a35
  401014:	11e1a300 	.word	0x11e1a300
  401018:	00401a05 	.word	0x00401a05
  40101c:	20400001 	.word	0x20400001
  401020:	000f4240 	.word	0x000f4240
  401024:	447a0000 	.word	0x447a0000
  401028:	00401429 	.word	0x00401429
  40102c:	004014d1 	.word	0x004014d1
  401030:	004019f1 	.word	0x004019f1
  401034:	400e1400 	.word	0x400e1400
  401038:	00400237 	.word	0x00400237
  40103c:	400e0e00 	.word	0x400e0e00
  401040:	0040023b 	.word	0x0040023b
  401044:	00401405 	.word	0x00401405
  401048:	004019b5 	.word	0x004019b5
  40104c:	3fe00000 	.word	0x3fe00000
  401050:	004019a1 	.word	0x004019a1
  401054:	00401a81 	.word	0x00401a81
  401058:	005a83e0 	.word	0x005a83e0
  40105c:	005a83df 	.word	0x005a83df

00401060 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void){ 
  401060:	b580      	push	{r7, lr}
	song hp;
	hp.melodia = &HPmelody;
	hp.tempo = 144;
	hp.n_notas = sizeof(HPmelody)/sizeof(HPmelody[0]);   // *1)

	init();
  401062:	4b34      	ldr	r3, [pc, #208]	; (401134 <main+0xd4>)
  401064:	4798      	blx	r3

	pio_set(PIOC, LED1_IDX_MASK);
  401066:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40106a:	4833      	ldr	r0, [pc, #204]	; (401138 <main+0xd8>)
  40106c:	4c33      	ldr	r4, [pc, #204]	; (40113c <main+0xdc>)
  40106e:	47a0      	blx	r4
	pio_set(PIOD, LED2_IDX_MASK);
  401070:	4d33      	ldr	r5, [pc, #204]	; (401140 <main+0xe0>)
  401072:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401076:	4628      	mov	r0, r5
  401078:	47a0      	blx	r4
	pio_set(PIOD, LED3_IDX_MASK);
  40107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40107e:	4628      	mov	r0, r5
  401080:	47a0      	blx	r4
	// super loop
	// aplicacoes embarcadas não devem sair do while(1).
	// 
	while (1){

		if (musica == 1){
  401082:	4e30      	ldr	r6, [pc, #192]	; (401144 <main+0xe4>)
			}
		}

		else if (musica == 2){
			pio_clear(PIOD, LED3_IDX_MASK);
			pio_clear(PIOC, LED1_IDX_MASK);
  401084:	4f2c      	ldr	r7, [pc, #176]	; (401138 <main+0xd8>)
  401086:	e02b      	b.n	4010e0 <main+0x80>
			pio_clear(PIOC, LED1_IDX_MASK);
  401088:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40108c:	4638      	mov	r0, r7
  40108e:	4b2e      	ldr	r3, [pc, #184]	; (401148 <main+0xe8>)
  401090:	4798      	blx	r3
			if (pio_get(BUT2_PIO, PIO_DEFAULT, BUT2_IDX_MASK) == 0){
  401092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401096:	2100      	movs	r1, #0
  401098:	4628      	mov	r0, r5
  40109a:	4b2c      	ldr	r3, [pc, #176]	; (40114c <main+0xec>)
  40109c:	4798      	blx	r3
  40109e:	b990      	cbnz	r0, 4010c6 <main+0x66>
				tocarMusica(storms.tempo, storms.melodia, storms.n_notas);
  4010a0:	2286      	movs	r2, #134	; 0x86
  4010a2:	492b      	ldr	r1, [pc, #172]	; (401150 <main+0xf0>)
  4010a4:	20c8      	movs	r0, #200	; 0xc8
  4010a6:	4b2b      	ldr	r3, [pc, #172]	; (401154 <main+0xf4>)
  4010a8:	4798      	blx	r3
  4010aa:	e00c      	b.n	4010c6 <main+0x66>
			pio_clear(PIOD, LED3_IDX_MASK);
  4010ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4010b0:	4628      	mov	r0, r5
  4010b2:	4b25      	ldr	r3, [pc, #148]	; (401148 <main+0xe8>)
  4010b4:	4798      	blx	r3
			if (pio_get(BUT2_PIO, PIO_DEFAULT, BUT2_IDX_MASK) == 0){	
  4010b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4010ba:	2100      	movs	r1, #0
  4010bc:	4628      	mov	r0, r5
  4010be:	4b23      	ldr	r3, [pc, #140]	; (40114c <main+0xec>)
  4010c0:	4798      	blx	r3
  4010c2:	2800      	cmp	r0, #0
  4010c4:	d02e      	beq.n	401124 <main+0xc4>
			if (pio_get(BUT2_PIO, PIO_DEFAULT, BUT2_IDX_MASK) == 0){	
				tocarMusica(hp.tempo, hp.melodia, hp.n_notas);
			}
		}

		pio_set(PIOC, LED1_IDX_MASK);
  4010c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4010ca:	4638      	mov	r0, r7
  4010cc:	4c1b      	ldr	r4, [pc, #108]	; (40113c <main+0xdc>)
  4010ce:	47a0      	blx	r4
		pio_set(PIOD, LED2_IDX_MASK);
  4010d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4010d4:	4628      	mov	r0, r5
  4010d6:	47a0      	blx	r4
		pio_set(PIOD, LED3_IDX_MASK);
  4010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4010dc:	4628      	mov	r0, r5
  4010de:	47a0      	blx	r4
		if (musica == 1){
  4010e0:	7833      	ldrb	r3, [r6, #0]
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	2b01      	cmp	r3, #1
  4010e6:	d0cf      	beq.n	401088 <main+0x28>
		else if (musica == 0){
  4010e8:	7833      	ldrb	r3, [r6, #0]
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	d0de      	beq.n	4010ac <main+0x4c>
		else if (musica == 2){
  4010ee:	7833      	ldrb	r3, [r6, #0]
  4010f0:	b2db      	uxtb	r3, r3
  4010f2:	2b02      	cmp	r3, #2
  4010f4:	d1e7      	bne.n	4010c6 <main+0x66>
			pio_clear(PIOD, LED3_IDX_MASK);
  4010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4010fa:	4628      	mov	r0, r5
  4010fc:	4c12      	ldr	r4, [pc, #72]	; (401148 <main+0xe8>)
  4010fe:	47a0      	blx	r4
			pio_clear(PIOC, LED1_IDX_MASK);
  401100:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401104:	4638      	mov	r0, r7
  401106:	47a0      	blx	r4
			if (pio_get(BUT2_PIO, PIO_DEFAULT, BUT2_IDX_MASK) == 0){	
  401108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40110c:	2100      	movs	r1, #0
  40110e:	4628      	mov	r0, r5
  401110:	4b0e      	ldr	r3, [pc, #56]	; (40114c <main+0xec>)
  401112:	4798      	blx	r3
  401114:	2800      	cmp	r0, #0
  401116:	d1d6      	bne.n	4010c6 <main+0x66>
				tocarMusica(hp.tempo, hp.melodia, hp.n_notas);
  401118:	227c      	movs	r2, #124	; 0x7c
  40111a:	490f      	ldr	r1, [pc, #60]	; (401158 <main+0xf8>)
  40111c:	2090      	movs	r0, #144	; 0x90
  40111e:	4b0d      	ldr	r3, [pc, #52]	; (401154 <main+0xf4>)
  401120:	4798      	blx	r3
  401122:	e7d0      	b.n	4010c6 <main+0x66>
				tocarMusica(got.tempo, got.melodia, got.n_notas);
  401124:	f44f 7282 	mov.w	r2, #260	; 0x104
  401128:	490c      	ldr	r1, [pc, #48]	; (40115c <main+0xfc>)
  40112a:	2055      	movs	r0, #85	; 0x55
  40112c:	4b09      	ldr	r3, [pc, #36]	; (401154 <main+0xf4>)
  40112e:	4798      	blx	r3
  401130:	e7c9      	b.n	4010c6 <main+0x66>
  401132:	bf00      	nop
  401134:	00400bed 	.word	0x00400bed
  401138:	400e1200 	.word	0x400e1200
  40113c:	00400237 	.word	0x00400237
  401140:	400e1400 	.word	0x400e1400
  401144:	20400cee 	.word	0x20400cee
  401148:	0040023b 	.word	0x0040023b
  40114c:	0040023f 	.word	0x0040023f
  401150:	20400610 	.word	0x20400610
  401154:	00400db9 	.word	0x00400db9
  401158:	20400420 	.word	0x20400420
  40115c:	20400010 	.word	0x20400010

00401160 <__aeabi_drsub>:
  401160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401164:	e002      	b.n	40116c <__adddf3>
  401166:	bf00      	nop

00401168 <__aeabi_dsub>:
  401168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040116c <__adddf3>:
  40116c:	b530      	push	{r4, r5, lr}
  40116e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401172:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401176:	ea94 0f05 	teq	r4, r5
  40117a:	bf08      	it	eq
  40117c:	ea90 0f02 	teqeq	r0, r2
  401180:	bf1f      	itttt	ne
  401182:	ea54 0c00 	orrsne.w	ip, r4, r0
  401186:	ea55 0c02 	orrsne.w	ip, r5, r2
  40118a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40118e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401192:	f000 80e2 	beq.w	40135a <__adddf3+0x1ee>
  401196:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40119a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40119e:	bfb8      	it	lt
  4011a0:	426d      	neglt	r5, r5
  4011a2:	dd0c      	ble.n	4011be <__adddf3+0x52>
  4011a4:	442c      	add	r4, r5
  4011a6:	ea80 0202 	eor.w	r2, r0, r2
  4011aa:	ea81 0303 	eor.w	r3, r1, r3
  4011ae:	ea82 0000 	eor.w	r0, r2, r0
  4011b2:	ea83 0101 	eor.w	r1, r3, r1
  4011b6:	ea80 0202 	eor.w	r2, r0, r2
  4011ba:	ea81 0303 	eor.w	r3, r1, r3
  4011be:	2d36      	cmp	r5, #54	; 0x36
  4011c0:	bf88      	it	hi
  4011c2:	bd30      	pophi	{r4, r5, pc}
  4011c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4011c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4011cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4011d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4011d4:	d002      	beq.n	4011dc <__adddf3+0x70>
  4011d6:	4240      	negs	r0, r0
  4011d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4011dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4011e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4011e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4011e8:	d002      	beq.n	4011f0 <__adddf3+0x84>
  4011ea:	4252      	negs	r2, r2
  4011ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4011f0:	ea94 0f05 	teq	r4, r5
  4011f4:	f000 80a7 	beq.w	401346 <__adddf3+0x1da>
  4011f8:	f1a4 0401 	sub.w	r4, r4, #1
  4011fc:	f1d5 0e20 	rsbs	lr, r5, #32
  401200:	db0d      	blt.n	40121e <__adddf3+0xb2>
  401202:	fa02 fc0e 	lsl.w	ip, r2, lr
  401206:	fa22 f205 	lsr.w	r2, r2, r5
  40120a:	1880      	adds	r0, r0, r2
  40120c:	f141 0100 	adc.w	r1, r1, #0
  401210:	fa03 f20e 	lsl.w	r2, r3, lr
  401214:	1880      	adds	r0, r0, r2
  401216:	fa43 f305 	asr.w	r3, r3, r5
  40121a:	4159      	adcs	r1, r3
  40121c:	e00e      	b.n	40123c <__adddf3+0xd0>
  40121e:	f1a5 0520 	sub.w	r5, r5, #32
  401222:	f10e 0e20 	add.w	lr, lr, #32
  401226:	2a01      	cmp	r2, #1
  401228:	fa03 fc0e 	lsl.w	ip, r3, lr
  40122c:	bf28      	it	cs
  40122e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401232:	fa43 f305 	asr.w	r3, r3, r5
  401236:	18c0      	adds	r0, r0, r3
  401238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40123c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401240:	d507      	bpl.n	401252 <__adddf3+0xe6>
  401242:	f04f 0e00 	mov.w	lr, #0
  401246:	f1dc 0c00 	rsbs	ip, ip, #0
  40124a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40124e:	eb6e 0101 	sbc.w	r1, lr, r1
  401252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401256:	d31b      	bcc.n	401290 <__adddf3+0x124>
  401258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40125c:	d30c      	bcc.n	401278 <__adddf3+0x10c>
  40125e:	0849      	lsrs	r1, r1, #1
  401260:	ea5f 0030 	movs.w	r0, r0, rrx
  401264:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401268:	f104 0401 	add.w	r4, r4, #1
  40126c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401274:	f080 809a 	bcs.w	4013ac <__adddf3+0x240>
  401278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40127c:	bf08      	it	eq
  40127e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401282:	f150 0000 	adcs.w	r0, r0, #0
  401286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40128a:	ea41 0105 	orr.w	r1, r1, r5
  40128e:	bd30      	pop	{r4, r5, pc}
  401290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401294:	4140      	adcs	r0, r0
  401296:	eb41 0101 	adc.w	r1, r1, r1
  40129a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40129e:	f1a4 0401 	sub.w	r4, r4, #1
  4012a2:	d1e9      	bne.n	401278 <__adddf3+0x10c>
  4012a4:	f091 0f00 	teq	r1, #0
  4012a8:	bf04      	itt	eq
  4012aa:	4601      	moveq	r1, r0
  4012ac:	2000      	moveq	r0, #0
  4012ae:	fab1 f381 	clz	r3, r1
  4012b2:	bf08      	it	eq
  4012b4:	3320      	addeq	r3, #32
  4012b6:	f1a3 030b 	sub.w	r3, r3, #11
  4012ba:	f1b3 0220 	subs.w	r2, r3, #32
  4012be:	da0c      	bge.n	4012da <__adddf3+0x16e>
  4012c0:	320c      	adds	r2, #12
  4012c2:	dd08      	ble.n	4012d6 <__adddf3+0x16a>
  4012c4:	f102 0c14 	add.w	ip, r2, #20
  4012c8:	f1c2 020c 	rsb	r2, r2, #12
  4012cc:	fa01 f00c 	lsl.w	r0, r1, ip
  4012d0:	fa21 f102 	lsr.w	r1, r1, r2
  4012d4:	e00c      	b.n	4012f0 <__adddf3+0x184>
  4012d6:	f102 0214 	add.w	r2, r2, #20
  4012da:	bfd8      	it	le
  4012dc:	f1c2 0c20 	rsble	ip, r2, #32
  4012e0:	fa01 f102 	lsl.w	r1, r1, r2
  4012e4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4012e8:	bfdc      	itt	le
  4012ea:	ea41 010c 	orrle.w	r1, r1, ip
  4012ee:	4090      	lslle	r0, r2
  4012f0:	1ae4      	subs	r4, r4, r3
  4012f2:	bfa2      	ittt	ge
  4012f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4012f8:	4329      	orrge	r1, r5
  4012fa:	bd30      	popge	{r4, r5, pc}
  4012fc:	ea6f 0404 	mvn.w	r4, r4
  401300:	3c1f      	subs	r4, #31
  401302:	da1c      	bge.n	40133e <__adddf3+0x1d2>
  401304:	340c      	adds	r4, #12
  401306:	dc0e      	bgt.n	401326 <__adddf3+0x1ba>
  401308:	f104 0414 	add.w	r4, r4, #20
  40130c:	f1c4 0220 	rsb	r2, r4, #32
  401310:	fa20 f004 	lsr.w	r0, r0, r4
  401314:	fa01 f302 	lsl.w	r3, r1, r2
  401318:	ea40 0003 	orr.w	r0, r0, r3
  40131c:	fa21 f304 	lsr.w	r3, r1, r4
  401320:	ea45 0103 	orr.w	r1, r5, r3
  401324:	bd30      	pop	{r4, r5, pc}
  401326:	f1c4 040c 	rsb	r4, r4, #12
  40132a:	f1c4 0220 	rsb	r2, r4, #32
  40132e:	fa20 f002 	lsr.w	r0, r0, r2
  401332:	fa01 f304 	lsl.w	r3, r1, r4
  401336:	ea40 0003 	orr.w	r0, r0, r3
  40133a:	4629      	mov	r1, r5
  40133c:	bd30      	pop	{r4, r5, pc}
  40133e:	fa21 f004 	lsr.w	r0, r1, r4
  401342:	4629      	mov	r1, r5
  401344:	bd30      	pop	{r4, r5, pc}
  401346:	f094 0f00 	teq	r4, #0
  40134a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40134e:	bf06      	itte	eq
  401350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401354:	3401      	addeq	r4, #1
  401356:	3d01      	subne	r5, #1
  401358:	e74e      	b.n	4011f8 <__adddf3+0x8c>
  40135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40135e:	bf18      	it	ne
  401360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401364:	d029      	beq.n	4013ba <__adddf3+0x24e>
  401366:	ea94 0f05 	teq	r4, r5
  40136a:	bf08      	it	eq
  40136c:	ea90 0f02 	teqeq	r0, r2
  401370:	d005      	beq.n	40137e <__adddf3+0x212>
  401372:	ea54 0c00 	orrs.w	ip, r4, r0
  401376:	bf04      	itt	eq
  401378:	4619      	moveq	r1, r3
  40137a:	4610      	moveq	r0, r2
  40137c:	bd30      	pop	{r4, r5, pc}
  40137e:	ea91 0f03 	teq	r1, r3
  401382:	bf1e      	ittt	ne
  401384:	2100      	movne	r1, #0
  401386:	2000      	movne	r0, #0
  401388:	bd30      	popne	{r4, r5, pc}
  40138a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40138e:	d105      	bne.n	40139c <__adddf3+0x230>
  401390:	0040      	lsls	r0, r0, #1
  401392:	4149      	adcs	r1, r1
  401394:	bf28      	it	cs
  401396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40139a:	bd30      	pop	{r4, r5, pc}
  40139c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4013a0:	bf3c      	itt	cc
  4013a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4013a6:	bd30      	popcc	{r4, r5, pc}
  4013a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4013ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4013b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4013b4:	f04f 0000 	mov.w	r0, #0
  4013b8:	bd30      	pop	{r4, r5, pc}
  4013ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4013be:	bf1a      	itte	ne
  4013c0:	4619      	movne	r1, r3
  4013c2:	4610      	movne	r0, r2
  4013c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4013c8:	bf1c      	itt	ne
  4013ca:	460b      	movne	r3, r1
  4013cc:	4602      	movne	r2, r0
  4013ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4013d2:	bf06      	itte	eq
  4013d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4013d8:	ea91 0f03 	teqeq	r1, r3
  4013dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4013e0:	bd30      	pop	{r4, r5, pc}
  4013e2:	bf00      	nop

004013e4 <__aeabi_ui2d>:
  4013e4:	f090 0f00 	teq	r0, #0
  4013e8:	bf04      	itt	eq
  4013ea:	2100      	moveq	r1, #0
  4013ec:	4770      	bxeq	lr
  4013ee:	b530      	push	{r4, r5, lr}
  4013f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4013f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4013f8:	f04f 0500 	mov.w	r5, #0
  4013fc:	f04f 0100 	mov.w	r1, #0
  401400:	e750      	b.n	4012a4 <__adddf3+0x138>
  401402:	bf00      	nop

00401404 <__aeabi_i2d>:
  401404:	f090 0f00 	teq	r0, #0
  401408:	bf04      	itt	eq
  40140a:	2100      	moveq	r1, #0
  40140c:	4770      	bxeq	lr
  40140e:	b530      	push	{r4, r5, lr}
  401410:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401414:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40141c:	bf48      	it	mi
  40141e:	4240      	negmi	r0, r0
  401420:	f04f 0100 	mov.w	r1, #0
  401424:	e73e      	b.n	4012a4 <__adddf3+0x138>
  401426:	bf00      	nop

00401428 <__aeabi_f2d>:
  401428:	0042      	lsls	r2, r0, #1
  40142a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40142e:	ea4f 0131 	mov.w	r1, r1, rrx
  401432:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401436:	bf1f      	itttt	ne
  401438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40143c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401444:	4770      	bxne	lr
  401446:	f092 0f00 	teq	r2, #0
  40144a:	bf14      	ite	ne
  40144c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401450:	4770      	bxeq	lr
  401452:	b530      	push	{r4, r5, lr}
  401454:	f44f 7460 	mov.w	r4, #896	; 0x380
  401458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40145c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401460:	e720      	b.n	4012a4 <__adddf3+0x138>
  401462:	bf00      	nop

00401464 <__aeabi_ul2d>:
  401464:	ea50 0201 	orrs.w	r2, r0, r1
  401468:	bf08      	it	eq
  40146a:	4770      	bxeq	lr
  40146c:	b530      	push	{r4, r5, lr}
  40146e:	f04f 0500 	mov.w	r5, #0
  401472:	e00a      	b.n	40148a <__aeabi_l2d+0x16>

00401474 <__aeabi_l2d>:
  401474:	ea50 0201 	orrs.w	r2, r0, r1
  401478:	bf08      	it	eq
  40147a:	4770      	bxeq	lr
  40147c:	b530      	push	{r4, r5, lr}
  40147e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401482:	d502      	bpl.n	40148a <__aeabi_l2d+0x16>
  401484:	4240      	negs	r0, r0
  401486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40148a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40148e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401496:	f43f aedc 	beq.w	401252 <__adddf3+0xe6>
  40149a:	f04f 0203 	mov.w	r2, #3
  40149e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4014a2:	bf18      	it	ne
  4014a4:	3203      	addne	r2, #3
  4014a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4014aa:	bf18      	it	ne
  4014ac:	3203      	addne	r2, #3
  4014ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4014b2:	f1c2 0320 	rsb	r3, r2, #32
  4014b6:	fa00 fc03 	lsl.w	ip, r0, r3
  4014ba:	fa20 f002 	lsr.w	r0, r0, r2
  4014be:	fa01 fe03 	lsl.w	lr, r1, r3
  4014c2:	ea40 000e 	orr.w	r0, r0, lr
  4014c6:	fa21 f102 	lsr.w	r1, r1, r2
  4014ca:	4414      	add	r4, r2
  4014cc:	e6c1      	b.n	401252 <__adddf3+0xe6>
  4014ce:	bf00      	nop

004014d0 <__aeabi_dmul>:
  4014d0:	b570      	push	{r4, r5, r6, lr}
  4014d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4014d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4014da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4014de:	bf1d      	ittte	ne
  4014e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4014e4:	ea94 0f0c 	teqne	r4, ip
  4014e8:	ea95 0f0c 	teqne	r5, ip
  4014ec:	f000 f8de 	bleq	4016ac <__aeabi_dmul+0x1dc>
  4014f0:	442c      	add	r4, r5
  4014f2:	ea81 0603 	eor.w	r6, r1, r3
  4014f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4014fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4014fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401502:	bf18      	it	ne
  401504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40150c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401510:	d038      	beq.n	401584 <__aeabi_dmul+0xb4>
  401512:	fba0 ce02 	umull	ip, lr, r0, r2
  401516:	f04f 0500 	mov.w	r5, #0
  40151a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40151e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401522:	fbe0 e503 	umlal	lr, r5, r0, r3
  401526:	f04f 0600 	mov.w	r6, #0
  40152a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40152e:	f09c 0f00 	teq	ip, #0
  401532:	bf18      	it	ne
  401534:	f04e 0e01 	orrne.w	lr, lr, #1
  401538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40153c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401544:	d204      	bcs.n	401550 <__aeabi_dmul+0x80>
  401546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40154a:	416d      	adcs	r5, r5
  40154c:	eb46 0606 	adc.w	r6, r6, r6
  401550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40155c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401568:	bf88      	it	hi
  40156a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40156e:	d81e      	bhi.n	4015ae <__aeabi_dmul+0xde>
  401570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401574:	bf08      	it	eq
  401576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40157a:	f150 0000 	adcs.w	r0, r0, #0
  40157e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401582:	bd70      	pop	{r4, r5, r6, pc}
  401584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401588:	ea46 0101 	orr.w	r1, r6, r1
  40158c:	ea40 0002 	orr.w	r0, r0, r2
  401590:	ea81 0103 	eor.w	r1, r1, r3
  401594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401598:	bfc2      	ittt	gt
  40159a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40159e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4015a2:	bd70      	popgt	{r4, r5, r6, pc}
  4015a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4015a8:	f04f 0e00 	mov.w	lr, #0
  4015ac:	3c01      	subs	r4, #1
  4015ae:	f300 80ab 	bgt.w	401708 <__aeabi_dmul+0x238>
  4015b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4015b6:	bfde      	ittt	le
  4015b8:	2000      	movle	r0, #0
  4015ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4015be:	bd70      	pople	{r4, r5, r6, pc}
  4015c0:	f1c4 0400 	rsb	r4, r4, #0
  4015c4:	3c20      	subs	r4, #32
  4015c6:	da35      	bge.n	401634 <__aeabi_dmul+0x164>
  4015c8:	340c      	adds	r4, #12
  4015ca:	dc1b      	bgt.n	401604 <__aeabi_dmul+0x134>
  4015cc:	f104 0414 	add.w	r4, r4, #20
  4015d0:	f1c4 0520 	rsb	r5, r4, #32
  4015d4:	fa00 f305 	lsl.w	r3, r0, r5
  4015d8:	fa20 f004 	lsr.w	r0, r0, r4
  4015dc:	fa01 f205 	lsl.w	r2, r1, r5
  4015e0:	ea40 0002 	orr.w	r0, r0, r2
  4015e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4015e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4015ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4015f0:	fa21 f604 	lsr.w	r6, r1, r4
  4015f4:	eb42 0106 	adc.w	r1, r2, r6
  4015f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4015fc:	bf08      	it	eq
  4015fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401602:	bd70      	pop	{r4, r5, r6, pc}
  401604:	f1c4 040c 	rsb	r4, r4, #12
  401608:	f1c4 0520 	rsb	r5, r4, #32
  40160c:	fa00 f304 	lsl.w	r3, r0, r4
  401610:	fa20 f005 	lsr.w	r0, r0, r5
  401614:	fa01 f204 	lsl.w	r2, r1, r4
  401618:	ea40 0002 	orr.w	r0, r0, r2
  40161c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401624:	f141 0100 	adc.w	r1, r1, #0
  401628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40162c:	bf08      	it	eq
  40162e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401632:	bd70      	pop	{r4, r5, r6, pc}
  401634:	f1c4 0520 	rsb	r5, r4, #32
  401638:	fa00 f205 	lsl.w	r2, r0, r5
  40163c:	ea4e 0e02 	orr.w	lr, lr, r2
  401640:	fa20 f304 	lsr.w	r3, r0, r4
  401644:	fa01 f205 	lsl.w	r2, r1, r5
  401648:	ea43 0302 	orr.w	r3, r3, r2
  40164c:	fa21 f004 	lsr.w	r0, r1, r4
  401650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401654:	fa21 f204 	lsr.w	r2, r1, r4
  401658:	ea20 0002 	bic.w	r0, r0, r2
  40165c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401664:	bf08      	it	eq
  401666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40166a:	bd70      	pop	{r4, r5, r6, pc}
  40166c:	f094 0f00 	teq	r4, #0
  401670:	d10f      	bne.n	401692 <__aeabi_dmul+0x1c2>
  401672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401676:	0040      	lsls	r0, r0, #1
  401678:	eb41 0101 	adc.w	r1, r1, r1
  40167c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401680:	bf08      	it	eq
  401682:	3c01      	subeq	r4, #1
  401684:	d0f7      	beq.n	401676 <__aeabi_dmul+0x1a6>
  401686:	ea41 0106 	orr.w	r1, r1, r6
  40168a:	f095 0f00 	teq	r5, #0
  40168e:	bf18      	it	ne
  401690:	4770      	bxne	lr
  401692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401696:	0052      	lsls	r2, r2, #1
  401698:	eb43 0303 	adc.w	r3, r3, r3
  40169c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4016a0:	bf08      	it	eq
  4016a2:	3d01      	subeq	r5, #1
  4016a4:	d0f7      	beq.n	401696 <__aeabi_dmul+0x1c6>
  4016a6:	ea43 0306 	orr.w	r3, r3, r6
  4016aa:	4770      	bx	lr
  4016ac:	ea94 0f0c 	teq	r4, ip
  4016b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4016b4:	bf18      	it	ne
  4016b6:	ea95 0f0c 	teqne	r5, ip
  4016ba:	d00c      	beq.n	4016d6 <__aeabi_dmul+0x206>
  4016bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4016c0:	bf18      	it	ne
  4016c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4016c6:	d1d1      	bne.n	40166c <__aeabi_dmul+0x19c>
  4016c8:	ea81 0103 	eor.w	r1, r1, r3
  4016cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4016d0:	f04f 0000 	mov.w	r0, #0
  4016d4:	bd70      	pop	{r4, r5, r6, pc}
  4016d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4016da:	bf06      	itte	eq
  4016dc:	4610      	moveq	r0, r2
  4016de:	4619      	moveq	r1, r3
  4016e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4016e4:	d019      	beq.n	40171a <__aeabi_dmul+0x24a>
  4016e6:	ea94 0f0c 	teq	r4, ip
  4016ea:	d102      	bne.n	4016f2 <__aeabi_dmul+0x222>
  4016ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4016f0:	d113      	bne.n	40171a <__aeabi_dmul+0x24a>
  4016f2:	ea95 0f0c 	teq	r5, ip
  4016f6:	d105      	bne.n	401704 <__aeabi_dmul+0x234>
  4016f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4016fc:	bf1c      	itt	ne
  4016fe:	4610      	movne	r0, r2
  401700:	4619      	movne	r1, r3
  401702:	d10a      	bne.n	40171a <__aeabi_dmul+0x24a>
  401704:	ea81 0103 	eor.w	r1, r1, r3
  401708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40170c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401714:	f04f 0000 	mov.w	r0, #0
  401718:	bd70      	pop	{r4, r5, r6, pc}
  40171a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40171e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401722:	bd70      	pop	{r4, r5, r6, pc}

00401724 <__aeabi_ddiv>:
  401724:	b570      	push	{r4, r5, r6, lr}
  401726:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40172a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40172e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401732:	bf1d      	ittte	ne
  401734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401738:	ea94 0f0c 	teqne	r4, ip
  40173c:	ea95 0f0c 	teqne	r5, ip
  401740:	f000 f8a7 	bleq	401892 <__aeabi_ddiv+0x16e>
  401744:	eba4 0405 	sub.w	r4, r4, r5
  401748:	ea81 0e03 	eor.w	lr, r1, r3
  40174c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401750:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401754:	f000 8088 	beq.w	401868 <__aeabi_ddiv+0x144>
  401758:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40175c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401768:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40176c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401774:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40177c:	429d      	cmp	r5, r3
  40177e:	bf08      	it	eq
  401780:	4296      	cmpeq	r6, r2
  401782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401786:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40178a:	d202      	bcs.n	401792 <__aeabi_ddiv+0x6e>
  40178c:	085b      	lsrs	r3, r3, #1
  40178e:	ea4f 0232 	mov.w	r2, r2, rrx
  401792:	1ab6      	subs	r6, r6, r2
  401794:	eb65 0503 	sbc.w	r5, r5, r3
  401798:	085b      	lsrs	r3, r3, #1
  40179a:	ea4f 0232 	mov.w	r2, r2, rrx
  40179e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4017a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4017a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4017aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4017ae:	bf22      	ittt	cs
  4017b0:	1ab6      	subcs	r6, r6, r2
  4017b2:	4675      	movcs	r5, lr
  4017b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4017b8:	085b      	lsrs	r3, r3, #1
  4017ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4017be:	ebb6 0e02 	subs.w	lr, r6, r2
  4017c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4017c6:	bf22      	ittt	cs
  4017c8:	1ab6      	subcs	r6, r6, r2
  4017ca:	4675      	movcs	r5, lr
  4017cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4017d0:	085b      	lsrs	r3, r3, #1
  4017d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4017d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4017da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4017de:	bf22      	ittt	cs
  4017e0:	1ab6      	subcs	r6, r6, r2
  4017e2:	4675      	movcs	r5, lr
  4017e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4017e8:	085b      	lsrs	r3, r3, #1
  4017ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4017ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4017f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4017f6:	bf22      	ittt	cs
  4017f8:	1ab6      	subcs	r6, r6, r2
  4017fa:	4675      	movcs	r5, lr
  4017fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401800:	ea55 0e06 	orrs.w	lr, r5, r6
  401804:	d018      	beq.n	401838 <__aeabi_ddiv+0x114>
  401806:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40180a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40180e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40181a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40181e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401822:	d1c0      	bne.n	4017a6 <__aeabi_ddiv+0x82>
  401824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401828:	d10b      	bne.n	401842 <__aeabi_ddiv+0x11e>
  40182a:	ea41 0100 	orr.w	r1, r1, r0
  40182e:	f04f 0000 	mov.w	r0, #0
  401832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401836:	e7b6      	b.n	4017a6 <__aeabi_ddiv+0x82>
  401838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40183c:	bf04      	itt	eq
  40183e:	4301      	orreq	r1, r0
  401840:	2000      	moveq	r0, #0
  401842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401846:	bf88      	it	hi
  401848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40184c:	f63f aeaf 	bhi.w	4015ae <__aeabi_dmul+0xde>
  401850:	ebb5 0c03 	subs.w	ip, r5, r3
  401854:	bf04      	itt	eq
  401856:	ebb6 0c02 	subseq.w	ip, r6, r2
  40185a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40185e:	f150 0000 	adcs.w	r0, r0, #0
  401862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401866:	bd70      	pop	{r4, r5, r6, pc}
  401868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40186c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401874:	bfc2      	ittt	gt
  401876:	ebd4 050c 	rsbsgt	r5, r4, ip
  40187a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40187e:	bd70      	popgt	{r4, r5, r6, pc}
  401880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401884:	f04f 0e00 	mov.w	lr, #0
  401888:	3c01      	subs	r4, #1
  40188a:	e690      	b.n	4015ae <__aeabi_dmul+0xde>
  40188c:	ea45 0e06 	orr.w	lr, r5, r6
  401890:	e68d      	b.n	4015ae <__aeabi_dmul+0xde>
  401892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401896:	ea94 0f0c 	teq	r4, ip
  40189a:	bf08      	it	eq
  40189c:	ea95 0f0c 	teqeq	r5, ip
  4018a0:	f43f af3b 	beq.w	40171a <__aeabi_dmul+0x24a>
  4018a4:	ea94 0f0c 	teq	r4, ip
  4018a8:	d10a      	bne.n	4018c0 <__aeabi_ddiv+0x19c>
  4018aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4018ae:	f47f af34 	bne.w	40171a <__aeabi_dmul+0x24a>
  4018b2:	ea95 0f0c 	teq	r5, ip
  4018b6:	f47f af25 	bne.w	401704 <__aeabi_dmul+0x234>
  4018ba:	4610      	mov	r0, r2
  4018bc:	4619      	mov	r1, r3
  4018be:	e72c      	b.n	40171a <__aeabi_dmul+0x24a>
  4018c0:	ea95 0f0c 	teq	r5, ip
  4018c4:	d106      	bne.n	4018d4 <__aeabi_ddiv+0x1b0>
  4018c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4018ca:	f43f aefd 	beq.w	4016c8 <__aeabi_dmul+0x1f8>
  4018ce:	4610      	mov	r0, r2
  4018d0:	4619      	mov	r1, r3
  4018d2:	e722      	b.n	40171a <__aeabi_dmul+0x24a>
  4018d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4018d8:	bf18      	it	ne
  4018da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4018de:	f47f aec5 	bne.w	40166c <__aeabi_dmul+0x19c>
  4018e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4018e6:	f47f af0d 	bne.w	401704 <__aeabi_dmul+0x234>
  4018ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4018ee:	f47f aeeb 	bne.w	4016c8 <__aeabi_dmul+0x1f8>
  4018f2:	e712      	b.n	40171a <__aeabi_dmul+0x24a>

004018f4 <__gedf2>:
  4018f4:	f04f 3cff 	mov.w	ip, #4294967295
  4018f8:	e006      	b.n	401908 <__cmpdf2+0x4>
  4018fa:	bf00      	nop

004018fc <__ledf2>:
  4018fc:	f04f 0c01 	mov.w	ip, #1
  401900:	e002      	b.n	401908 <__cmpdf2+0x4>
  401902:	bf00      	nop

00401904 <__cmpdf2>:
  401904:	f04f 0c01 	mov.w	ip, #1
  401908:	f84d cd04 	str.w	ip, [sp, #-4]!
  40190c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401918:	bf18      	it	ne
  40191a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40191e:	d01b      	beq.n	401958 <__cmpdf2+0x54>
  401920:	b001      	add	sp, #4
  401922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  401926:	bf0c      	ite	eq
  401928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40192c:	ea91 0f03 	teqne	r1, r3
  401930:	bf02      	ittt	eq
  401932:	ea90 0f02 	teqeq	r0, r2
  401936:	2000      	moveq	r0, #0
  401938:	4770      	bxeq	lr
  40193a:	f110 0f00 	cmn.w	r0, #0
  40193e:	ea91 0f03 	teq	r1, r3
  401942:	bf58      	it	pl
  401944:	4299      	cmppl	r1, r3
  401946:	bf08      	it	eq
  401948:	4290      	cmpeq	r0, r2
  40194a:	bf2c      	ite	cs
  40194c:	17d8      	asrcs	r0, r3, #31
  40194e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  401952:	f040 0001 	orr.w	r0, r0, #1
  401956:	4770      	bx	lr
  401958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40195c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401960:	d102      	bne.n	401968 <__cmpdf2+0x64>
  401962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  401966:	d107      	bne.n	401978 <__cmpdf2+0x74>
  401968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40196c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401970:	d1d6      	bne.n	401920 <__cmpdf2+0x1c>
  401972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  401976:	d0d3      	beq.n	401920 <__cmpdf2+0x1c>
  401978:	f85d 0b04 	ldr.w	r0, [sp], #4
  40197c:	4770      	bx	lr
  40197e:	bf00      	nop

00401980 <__aeabi_cdrcmple>:
  401980:	4684      	mov	ip, r0
  401982:	4610      	mov	r0, r2
  401984:	4662      	mov	r2, ip
  401986:	468c      	mov	ip, r1
  401988:	4619      	mov	r1, r3
  40198a:	4663      	mov	r3, ip
  40198c:	e000      	b.n	401990 <__aeabi_cdcmpeq>
  40198e:	bf00      	nop

00401990 <__aeabi_cdcmpeq>:
  401990:	b501      	push	{r0, lr}
  401992:	f7ff ffb7 	bl	401904 <__cmpdf2>
  401996:	2800      	cmp	r0, #0
  401998:	bf48      	it	mi
  40199a:	f110 0f00 	cmnmi.w	r0, #0
  40199e:	bd01      	pop	{r0, pc}

004019a0 <__aeabi_dcmpeq>:
  4019a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4019a4:	f7ff fff4 	bl	401990 <__aeabi_cdcmpeq>
  4019a8:	bf0c      	ite	eq
  4019aa:	2001      	moveq	r0, #1
  4019ac:	2000      	movne	r0, #0
  4019ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4019b2:	bf00      	nop

004019b4 <__aeabi_dcmplt>:
  4019b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4019b8:	f7ff ffea 	bl	401990 <__aeabi_cdcmpeq>
  4019bc:	bf34      	ite	cc
  4019be:	2001      	movcc	r0, #1
  4019c0:	2000      	movcs	r0, #0
  4019c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4019c6:	bf00      	nop

004019c8 <__aeabi_dcmple>:
  4019c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4019cc:	f7ff ffe0 	bl	401990 <__aeabi_cdcmpeq>
  4019d0:	bf94      	ite	ls
  4019d2:	2001      	movls	r0, #1
  4019d4:	2000      	movhi	r0, #0
  4019d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4019da:	bf00      	nop

004019dc <__aeabi_dcmpge>:
  4019dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4019e0:	f7ff ffce 	bl	401980 <__aeabi_cdrcmple>
  4019e4:	bf94      	ite	ls
  4019e6:	2001      	movls	r0, #1
  4019e8:	2000      	movhi	r0, #0
  4019ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4019ee:	bf00      	nop

004019f0 <__aeabi_dcmpgt>:
  4019f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4019f4:	f7ff ffc4 	bl	401980 <__aeabi_cdrcmple>
  4019f8:	bf34      	ite	cc
  4019fa:	2001      	movcc	r0, #1
  4019fc:	2000      	movcs	r0, #0
  4019fe:	f85d fb08 	ldr.w	pc, [sp], #8
  401a02:	bf00      	nop

00401a04 <__aeabi_uldivmod>:
  401a04:	b953      	cbnz	r3, 401a1c <__aeabi_uldivmod+0x18>
  401a06:	b94a      	cbnz	r2, 401a1c <__aeabi_uldivmod+0x18>
  401a08:	2900      	cmp	r1, #0
  401a0a:	bf08      	it	eq
  401a0c:	2800      	cmpeq	r0, #0
  401a0e:	bf1c      	itt	ne
  401a10:	f04f 31ff 	movne.w	r1, #4294967295
  401a14:	f04f 30ff 	movne.w	r0, #4294967295
  401a18:	f000 b9c4 	b.w	401da4 <__aeabi_idiv0>
  401a1c:	f1ad 0c08 	sub.w	ip, sp, #8
  401a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401a24:	f000 f850 	bl	401ac8 <__udivmoddi4>
  401a28:	f8dd e004 	ldr.w	lr, [sp, #4]
  401a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401a30:	b004      	add	sp, #16
  401a32:	4770      	bx	lr

00401a34 <__aeabi_f2ulz>:
  401a34:	b5d0      	push	{r4, r6, r7, lr}
  401a36:	f7ff fcf7 	bl	401428 <__aeabi_f2d>
  401a3a:	2200      	movs	r2, #0
  401a3c:	4b0e      	ldr	r3, [pc, #56]	; (401a78 <__aeabi_f2ulz+0x44>)
  401a3e:	4606      	mov	r6, r0
  401a40:	460f      	mov	r7, r1
  401a42:	f7ff fd45 	bl	4014d0 <__aeabi_dmul>
  401a46:	f000 f9af 	bl	401da8 <__aeabi_d2uiz>
  401a4a:	4604      	mov	r4, r0
  401a4c:	f7ff fcca 	bl	4013e4 <__aeabi_ui2d>
  401a50:	2200      	movs	r2, #0
  401a52:	4b0a      	ldr	r3, [pc, #40]	; (401a7c <__aeabi_f2ulz+0x48>)
  401a54:	f7ff fd3c 	bl	4014d0 <__aeabi_dmul>
  401a58:	4602      	mov	r2, r0
  401a5a:	460b      	mov	r3, r1
  401a5c:	4630      	mov	r0, r6
  401a5e:	4639      	mov	r1, r7
  401a60:	f7ff fb82 	bl	401168 <__aeabi_dsub>
  401a64:	f000 f9a0 	bl	401da8 <__aeabi_d2uiz>
  401a68:	4623      	mov	r3, r4
  401a6a:	2200      	movs	r2, #0
  401a6c:	ea42 0200 	orr.w	r2, r2, r0
  401a70:	4610      	mov	r0, r2
  401a72:	4619      	mov	r1, r3
  401a74:	bdd0      	pop	{r4, r6, r7, pc}
  401a76:	bf00      	nop
  401a78:	3df00000 	.word	0x3df00000
  401a7c:	41f00000 	.word	0x41f00000

00401a80 <__aeabi_d2ulz>:
  401a80:	b5d0      	push	{r4, r6, r7, lr}
  401a82:	2200      	movs	r2, #0
  401a84:	4b0e      	ldr	r3, [pc, #56]	; (401ac0 <__aeabi_d2ulz+0x40>)
  401a86:	4606      	mov	r6, r0
  401a88:	460f      	mov	r7, r1
  401a8a:	f7ff fd21 	bl	4014d0 <__aeabi_dmul>
  401a8e:	f000 f98b 	bl	401da8 <__aeabi_d2uiz>
  401a92:	4604      	mov	r4, r0
  401a94:	f7ff fca6 	bl	4013e4 <__aeabi_ui2d>
  401a98:	2200      	movs	r2, #0
  401a9a:	4b0a      	ldr	r3, [pc, #40]	; (401ac4 <__aeabi_d2ulz+0x44>)
  401a9c:	f7ff fd18 	bl	4014d0 <__aeabi_dmul>
  401aa0:	4602      	mov	r2, r0
  401aa2:	460b      	mov	r3, r1
  401aa4:	4630      	mov	r0, r6
  401aa6:	4639      	mov	r1, r7
  401aa8:	f7ff fb5e 	bl	401168 <__aeabi_dsub>
  401aac:	f000 f97c 	bl	401da8 <__aeabi_d2uiz>
  401ab0:	4623      	mov	r3, r4
  401ab2:	2200      	movs	r2, #0
  401ab4:	ea42 0200 	orr.w	r2, r2, r0
  401ab8:	4610      	mov	r0, r2
  401aba:	4619      	mov	r1, r3
  401abc:	bdd0      	pop	{r4, r6, r7, pc}
  401abe:	bf00      	nop
  401ac0:	3df00000 	.word	0x3df00000
  401ac4:	41f00000 	.word	0x41f00000

00401ac8 <__udivmoddi4>:
  401ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401acc:	468c      	mov	ip, r1
  401ace:	460d      	mov	r5, r1
  401ad0:	4604      	mov	r4, r0
  401ad2:	9e08      	ldr	r6, [sp, #32]
  401ad4:	2b00      	cmp	r3, #0
  401ad6:	d151      	bne.n	401b7c <__udivmoddi4+0xb4>
  401ad8:	428a      	cmp	r2, r1
  401ada:	4617      	mov	r7, r2
  401adc:	d96d      	bls.n	401bba <__udivmoddi4+0xf2>
  401ade:	fab2 fe82 	clz	lr, r2
  401ae2:	f1be 0f00 	cmp.w	lr, #0
  401ae6:	d00b      	beq.n	401b00 <__udivmoddi4+0x38>
  401ae8:	f1ce 0c20 	rsb	ip, lr, #32
  401aec:	fa01 f50e 	lsl.w	r5, r1, lr
  401af0:	fa20 fc0c 	lsr.w	ip, r0, ip
  401af4:	fa02 f70e 	lsl.w	r7, r2, lr
  401af8:	ea4c 0c05 	orr.w	ip, ip, r5
  401afc:	fa00 f40e 	lsl.w	r4, r0, lr
  401b00:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401b04:	0c25      	lsrs	r5, r4, #16
  401b06:	fbbc f8fa 	udiv	r8, ip, sl
  401b0a:	fa1f f987 	uxth.w	r9, r7
  401b0e:	fb0a cc18 	mls	ip, sl, r8, ip
  401b12:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401b16:	fb08 f309 	mul.w	r3, r8, r9
  401b1a:	42ab      	cmp	r3, r5
  401b1c:	d90a      	bls.n	401b34 <__udivmoddi4+0x6c>
  401b1e:	19ed      	adds	r5, r5, r7
  401b20:	f108 32ff 	add.w	r2, r8, #4294967295
  401b24:	f080 8123 	bcs.w	401d6e <__udivmoddi4+0x2a6>
  401b28:	42ab      	cmp	r3, r5
  401b2a:	f240 8120 	bls.w	401d6e <__udivmoddi4+0x2a6>
  401b2e:	f1a8 0802 	sub.w	r8, r8, #2
  401b32:	443d      	add	r5, r7
  401b34:	1aed      	subs	r5, r5, r3
  401b36:	b2a4      	uxth	r4, r4
  401b38:	fbb5 f0fa 	udiv	r0, r5, sl
  401b3c:	fb0a 5510 	mls	r5, sl, r0, r5
  401b40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401b44:	fb00 f909 	mul.w	r9, r0, r9
  401b48:	45a1      	cmp	r9, r4
  401b4a:	d909      	bls.n	401b60 <__udivmoddi4+0x98>
  401b4c:	19e4      	adds	r4, r4, r7
  401b4e:	f100 33ff 	add.w	r3, r0, #4294967295
  401b52:	f080 810a 	bcs.w	401d6a <__udivmoddi4+0x2a2>
  401b56:	45a1      	cmp	r9, r4
  401b58:	f240 8107 	bls.w	401d6a <__udivmoddi4+0x2a2>
  401b5c:	3802      	subs	r0, #2
  401b5e:	443c      	add	r4, r7
  401b60:	eba4 0409 	sub.w	r4, r4, r9
  401b64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401b68:	2100      	movs	r1, #0
  401b6a:	2e00      	cmp	r6, #0
  401b6c:	d061      	beq.n	401c32 <__udivmoddi4+0x16a>
  401b6e:	fa24 f40e 	lsr.w	r4, r4, lr
  401b72:	2300      	movs	r3, #0
  401b74:	6034      	str	r4, [r6, #0]
  401b76:	6073      	str	r3, [r6, #4]
  401b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b7c:	428b      	cmp	r3, r1
  401b7e:	d907      	bls.n	401b90 <__udivmoddi4+0xc8>
  401b80:	2e00      	cmp	r6, #0
  401b82:	d054      	beq.n	401c2e <__udivmoddi4+0x166>
  401b84:	2100      	movs	r1, #0
  401b86:	e886 0021 	stmia.w	r6, {r0, r5}
  401b8a:	4608      	mov	r0, r1
  401b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b90:	fab3 f183 	clz	r1, r3
  401b94:	2900      	cmp	r1, #0
  401b96:	f040 808e 	bne.w	401cb6 <__udivmoddi4+0x1ee>
  401b9a:	42ab      	cmp	r3, r5
  401b9c:	d302      	bcc.n	401ba4 <__udivmoddi4+0xdc>
  401b9e:	4282      	cmp	r2, r0
  401ba0:	f200 80fa 	bhi.w	401d98 <__udivmoddi4+0x2d0>
  401ba4:	1a84      	subs	r4, r0, r2
  401ba6:	eb65 0503 	sbc.w	r5, r5, r3
  401baa:	2001      	movs	r0, #1
  401bac:	46ac      	mov	ip, r5
  401bae:	2e00      	cmp	r6, #0
  401bb0:	d03f      	beq.n	401c32 <__udivmoddi4+0x16a>
  401bb2:	e886 1010 	stmia.w	r6, {r4, ip}
  401bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bba:	b912      	cbnz	r2, 401bc2 <__udivmoddi4+0xfa>
  401bbc:	2701      	movs	r7, #1
  401bbe:	fbb7 f7f2 	udiv	r7, r7, r2
  401bc2:	fab7 fe87 	clz	lr, r7
  401bc6:	f1be 0f00 	cmp.w	lr, #0
  401bca:	d134      	bne.n	401c36 <__udivmoddi4+0x16e>
  401bcc:	1beb      	subs	r3, r5, r7
  401bce:	0c3a      	lsrs	r2, r7, #16
  401bd0:	fa1f fc87 	uxth.w	ip, r7
  401bd4:	2101      	movs	r1, #1
  401bd6:	fbb3 f8f2 	udiv	r8, r3, r2
  401bda:	0c25      	lsrs	r5, r4, #16
  401bdc:	fb02 3318 	mls	r3, r2, r8, r3
  401be0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401be4:	fb0c f308 	mul.w	r3, ip, r8
  401be8:	42ab      	cmp	r3, r5
  401bea:	d907      	bls.n	401bfc <__udivmoddi4+0x134>
  401bec:	19ed      	adds	r5, r5, r7
  401bee:	f108 30ff 	add.w	r0, r8, #4294967295
  401bf2:	d202      	bcs.n	401bfa <__udivmoddi4+0x132>
  401bf4:	42ab      	cmp	r3, r5
  401bf6:	f200 80d1 	bhi.w	401d9c <__udivmoddi4+0x2d4>
  401bfa:	4680      	mov	r8, r0
  401bfc:	1aed      	subs	r5, r5, r3
  401bfe:	b2a3      	uxth	r3, r4
  401c00:	fbb5 f0f2 	udiv	r0, r5, r2
  401c04:	fb02 5510 	mls	r5, r2, r0, r5
  401c08:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401c0c:	fb0c fc00 	mul.w	ip, ip, r0
  401c10:	45a4      	cmp	ip, r4
  401c12:	d907      	bls.n	401c24 <__udivmoddi4+0x15c>
  401c14:	19e4      	adds	r4, r4, r7
  401c16:	f100 33ff 	add.w	r3, r0, #4294967295
  401c1a:	d202      	bcs.n	401c22 <__udivmoddi4+0x15a>
  401c1c:	45a4      	cmp	ip, r4
  401c1e:	f200 80b8 	bhi.w	401d92 <__udivmoddi4+0x2ca>
  401c22:	4618      	mov	r0, r3
  401c24:	eba4 040c 	sub.w	r4, r4, ip
  401c28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401c2c:	e79d      	b.n	401b6a <__udivmoddi4+0xa2>
  401c2e:	4631      	mov	r1, r6
  401c30:	4630      	mov	r0, r6
  401c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c36:	f1ce 0420 	rsb	r4, lr, #32
  401c3a:	fa05 f30e 	lsl.w	r3, r5, lr
  401c3e:	fa07 f70e 	lsl.w	r7, r7, lr
  401c42:	fa20 f804 	lsr.w	r8, r0, r4
  401c46:	0c3a      	lsrs	r2, r7, #16
  401c48:	fa25 f404 	lsr.w	r4, r5, r4
  401c4c:	ea48 0803 	orr.w	r8, r8, r3
  401c50:	fbb4 f1f2 	udiv	r1, r4, r2
  401c54:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401c58:	fb02 4411 	mls	r4, r2, r1, r4
  401c5c:	fa1f fc87 	uxth.w	ip, r7
  401c60:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401c64:	fb01 f30c 	mul.w	r3, r1, ip
  401c68:	42ab      	cmp	r3, r5
  401c6a:	fa00 f40e 	lsl.w	r4, r0, lr
  401c6e:	d909      	bls.n	401c84 <__udivmoddi4+0x1bc>
  401c70:	19ed      	adds	r5, r5, r7
  401c72:	f101 30ff 	add.w	r0, r1, #4294967295
  401c76:	f080 808a 	bcs.w	401d8e <__udivmoddi4+0x2c6>
  401c7a:	42ab      	cmp	r3, r5
  401c7c:	f240 8087 	bls.w	401d8e <__udivmoddi4+0x2c6>
  401c80:	3902      	subs	r1, #2
  401c82:	443d      	add	r5, r7
  401c84:	1aeb      	subs	r3, r5, r3
  401c86:	fa1f f588 	uxth.w	r5, r8
  401c8a:	fbb3 f0f2 	udiv	r0, r3, r2
  401c8e:	fb02 3310 	mls	r3, r2, r0, r3
  401c92:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401c96:	fb00 f30c 	mul.w	r3, r0, ip
  401c9a:	42ab      	cmp	r3, r5
  401c9c:	d907      	bls.n	401cae <__udivmoddi4+0x1e6>
  401c9e:	19ed      	adds	r5, r5, r7
  401ca0:	f100 38ff 	add.w	r8, r0, #4294967295
  401ca4:	d26f      	bcs.n	401d86 <__udivmoddi4+0x2be>
  401ca6:	42ab      	cmp	r3, r5
  401ca8:	d96d      	bls.n	401d86 <__udivmoddi4+0x2be>
  401caa:	3802      	subs	r0, #2
  401cac:	443d      	add	r5, r7
  401cae:	1aeb      	subs	r3, r5, r3
  401cb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401cb4:	e78f      	b.n	401bd6 <__udivmoddi4+0x10e>
  401cb6:	f1c1 0720 	rsb	r7, r1, #32
  401cba:	fa22 f807 	lsr.w	r8, r2, r7
  401cbe:	408b      	lsls	r3, r1
  401cc0:	fa05 f401 	lsl.w	r4, r5, r1
  401cc4:	ea48 0303 	orr.w	r3, r8, r3
  401cc8:	fa20 fe07 	lsr.w	lr, r0, r7
  401ccc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401cd0:	40fd      	lsrs	r5, r7
  401cd2:	ea4e 0e04 	orr.w	lr, lr, r4
  401cd6:	fbb5 f9fc 	udiv	r9, r5, ip
  401cda:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401cde:	fb0c 5519 	mls	r5, ip, r9, r5
  401ce2:	fa1f f883 	uxth.w	r8, r3
  401ce6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401cea:	fb09 f408 	mul.w	r4, r9, r8
  401cee:	42ac      	cmp	r4, r5
  401cf0:	fa02 f201 	lsl.w	r2, r2, r1
  401cf4:	fa00 fa01 	lsl.w	sl, r0, r1
  401cf8:	d908      	bls.n	401d0c <__udivmoddi4+0x244>
  401cfa:	18ed      	adds	r5, r5, r3
  401cfc:	f109 30ff 	add.w	r0, r9, #4294967295
  401d00:	d243      	bcs.n	401d8a <__udivmoddi4+0x2c2>
  401d02:	42ac      	cmp	r4, r5
  401d04:	d941      	bls.n	401d8a <__udivmoddi4+0x2c2>
  401d06:	f1a9 0902 	sub.w	r9, r9, #2
  401d0a:	441d      	add	r5, r3
  401d0c:	1b2d      	subs	r5, r5, r4
  401d0e:	fa1f fe8e 	uxth.w	lr, lr
  401d12:	fbb5 f0fc 	udiv	r0, r5, ip
  401d16:	fb0c 5510 	mls	r5, ip, r0, r5
  401d1a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401d1e:	fb00 f808 	mul.w	r8, r0, r8
  401d22:	45a0      	cmp	r8, r4
  401d24:	d907      	bls.n	401d36 <__udivmoddi4+0x26e>
  401d26:	18e4      	adds	r4, r4, r3
  401d28:	f100 35ff 	add.w	r5, r0, #4294967295
  401d2c:	d229      	bcs.n	401d82 <__udivmoddi4+0x2ba>
  401d2e:	45a0      	cmp	r8, r4
  401d30:	d927      	bls.n	401d82 <__udivmoddi4+0x2ba>
  401d32:	3802      	subs	r0, #2
  401d34:	441c      	add	r4, r3
  401d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401d3a:	eba4 0408 	sub.w	r4, r4, r8
  401d3e:	fba0 8902 	umull	r8, r9, r0, r2
  401d42:	454c      	cmp	r4, r9
  401d44:	46c6      	mov	lr, r8
  401d46:	464d      	mov	r5, r9
  401d48:	d315      	bcc.n	401d76 <__udivmoddi4+0x2ae>
  401d4a:	d012      	beq.n	401d72 <__udivmoddi4+0x2aa>
  401d4c:	b156      	cbz	r6, 401d64 <__udivmoddi4+0x29c>
  401d4e:	ebba 030e 	subs.w	r3, sl, lr
  401d52:	eb64 0405 	sbc.w	r4, r4, r5
  401d56:	fa04 f707 	lsl.w	r7, r4, r7
  401d5a:	40cb      	lsrs	r3, r1
  401d5c:	431f      	orrs	r7, r3
  401d5e:	40cc      	lsrs	r4, r1
  401d60:	6037      	str	r7, [r6, #0]
  401d62:	6074      	str	r4, [r6, #4]
  401d64:	2100      	movs	r1, #0
  401d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d6a:	4618      	mov	r0, r3
  401d6c:	e6f8      	b.n	401b60 <__udivmoddi4+0x98>
  401d6e:	4690      	mov	r8, r2
  401d70:	e6e0      	b.n	401b34 <__udivmoddi4+0x6c>
  401d72:	45c2      	cmp	sl, r8
  401d74:	d2ea      	bcs.n	401d4c <__udivmoddi4+0x284>
  401d76:	ebb8 0e02 	subs.w	lr, r8, r2
  401d7a:	eb69 0503 	sbc.w	r5, r9, r3
  401d7e:	3801      	subs	r0, #1
  401d80:	e7e4      	b.n	401d4c <__udivmoddi4+0x284>
  401d82:	4628      	mov	r0, r5
  401d84:	e7d7      	b.n	401d36 <__udivmoddi4+0x26e>
  401d86:	4640      	mov	r0, r8
  401d88:	e791      	b.n	401cae <__udivmoddi4+0x1e6>
  401d8a:	4681      	mov	r9, r0
  401d8c:	e7be      	b.n	401d0c <__udivmoddi4+0x244>
  401d8e:	4601      	mov	r1, r0
  401d90:	e778      	b.n	401c84 <__udivmoddi4+0x1bc>
  401d92:	3802      	subs	r0, #2
  401d94:	443c      	add	r4, r7
  401d96:	e745      	b.n	401c24 <__udivmoddi4+0x15c>
  401d98:	4608      	mov	r0, r1
  401d9a:	e708      	b.n	401bae <__udivmoddi4+0xe6>
  401d9c:	f1a8 0802 	sub.w	r8, r8, #2
  401da0:	443d      	add	r5, r7
  401da2:	e72b      	b.n	401bfc <__udivmoddi4+0x134>

00401da4 <__aeabi_idiv0>:
  401da4:	4770      	bx	lr
  401da6:	bf00      	nop

00401da8 <__aeabi_d2uiz>:
  401da8:	004a      	lsls	r2, r1, #1
  401daa:	d211      	bcs.n	401dd0 <__aeabi_d2uiz+0x28>
  401dac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401db0:	d211      	bcs.n	401dd6 <__aeabi_d2uiz+0x2e>
  401db2:	d50d      	bpl.n	401dd0 <__aeabi_d2uiz+0x28>
  401db4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401db8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401dbc:	d40e      	bmi.n	401ddc <__aeabi_d2uiz+0x34>
  401dbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401dc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401dca:	fa23 f002 	lsr.w	r0, r3, r2
  401dce:	4770      	bx	lr
  401dd0:	f04f 0000 	mov.w	r0, #0
  401dd4:	4770      	bx	lr
  401dd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401dda:	d102      	bne.n	401de2 <__aeabi_d2uiz+0x3a>
  401ddc:	f04f 30ff 	mov.w	r0, #4294967295
  401de0:	4770      	bx	lr
  401de2:	f04f 0000 	mov.w	r0, #0
  401de6:	4770      	bx	lr

00401de8 <__libc_init_array>:
  401de8:	b570      	push	{r4, r5, r6, lr}
  401dea:	4e0f      	ldr	r6, [pc, #60]	; (401e28 <__libc_init_array+0x40>)
  401dec:	4d0f      	ldr	r5, [pc, #60]	; (401e2c <__libc_init_array+0x44>)
  401dee:	1b76      	subs	r6, r6, r5
  401df0:	10b6      	asrs	r6, r6, #2
  401df2:	bf18      	it	ne
  401df4:	2400      	movne	r4, #0
  401df6:	d005      	beq.n	401e04 <__libc_init_array+0x1c>
  401df8:	3401      	adds	r4, #1
  401dfa:	f855 3b04 	ldr.w	r3, [r5], #4
  401dfe:	4798      	blx	r3
  401e00:	42a6      	cmp	r6, r4
  401e02:	d1f9      	bne.n	401df8 <__libc_init_array+0x10>
  401e04:	4e0a      	ldr	r6, [pc, #40]	; (401e30 <__libc_init_array+0x48>)
  401e06:	4d0b      	ldr	r5, [pc, #44]	; (401e34 <__libc_init_array+0x4c>)
  401e08:	1b76      	subs	r6, r6, r5
  401e0a:	f000 f8a7 	bl	401f5c <_init>
  401e0e:	10b6      	asrs	r6, r6, #2
  401e10:	bf18      	it	ne
  401e12:	2400      	movne	r4, #0
  401e14:	d006      	beq.n	401e24 <__libc_init_array+0x3c>
  401e16:	3401      	adds	r4, #1
  401e18:	f855 3b04 	ldr.w	r3, [r5], #4
  401e1c:	4798      	blx	r3
  401e1e:	42a6      	cmp	r6, r4
  401e20:	d1f9      	bne.n	401e16 <__libc_init_array+0x2e>
  401e22:	bd70      	pop	{r4, r5, r6, pc}
  401e24:	bd70      	pop	{r4, r5, r6, pc}
  401e26:	bf00      	nop
  401e28:	00401f68 	.word	0x00401f68
  401e2c:	00401f68 	.word	0x00401f68
  401e30:	00401f70 	.word	0x00401f70
  401e34:	00401f68 	.word	0x00401f68

00401e38 <register_fini>:
  401e38:	4b02      	ldr	r3, [pc, #8]	; (401e44 <register_fini+0xc>)
  401e3a:	b113      	cbz	r3, 401e42 <register_fini+0xa>
  401e3c:	4802      	ldr	r0, [pc, #8]	; (401e48 <register_fini+0x10>)
  401e3e:	f000 b805 	b.w	401e4c <atexit>
  401e42:	4770      	bx	lr
  401e44:	00000000 	.word	0x00000000
  401e48:	00401e59 	.word	0x00401e59

00401e4c <atexit>:
  401e4c:	2300      	movs	r3, #0
  401e4e:	4601      	mov	r1, r0
  401e50:	461a      	mov	r2, r3
  401e52:	4618      	mov	r0, r3
  401e54:	f000 b81e 	b.w	401e94 <__register_exitproc>

00401e58 <__libc_fini_array>:
  401e58:	b538      	push	{r3, r4, r5, lr}
  401e5a:	4c0a      	ldr	r4, [pc, #40]	; (401e84 <__libc_fini_array+0x2c>)
  401e5c:	4d0a      	ldr	r5, [pc, #40]	; (401e88 <__libc_fini_array+0x30>)
  401e5e:	1b64      	subs	r4, r4, r5
  401e60:	10a4      	asrs	r4, r4, #2
  401e62:	d00a      	beq.n	401e7a <__libc_fini_array+0x22>
  401e64:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401e68:	3b01      	subs	r3, #1
  401e6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401e6e:	3c01      	subs	r4, #1
  401e70:	f855 3904 	ldr.w	r3, [r5], #-4
  401e74:	4798      	blx	r3
  401e76:	2c00      	cmp	r4, #0
  401e78:	d1f9      	bne.n	401e6e <__libc_fini_array+0x16>
  401e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401e7e:	f000 b877 	b.w	401f70 <_fini>
  401e82:	bf00      	nop
  401e84:	00401f80 	.word	0x00401f80
  401e88:	00401f7c 	.word	0x00401f7c

00401e8c <__retarget_lock_acquire_recursive>:
  401e8c:	4770      	bx	lr
  401e8e:	bf00      	nop

00401e90 <__retarget_lock_release_recursive>:
  401e90:	4770      	bx	lr
  401e92:	bf00      	nop

00401e94 <__register_exitproc>:
  401e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e98:	4d2c      	ldr	r5, [pc, #176]	; (401f4c <__register_exitproc+0xb8>)
  401e9a:	4606      	mov	r6, r0
  401e9c:	6828      	ldr	r0, [r5, #0]
  401e9e:	4698      	mov	r8, r3
  401ea0:	460f      	mov	r7, r1
  401ea2:	4691      	mov	r9, r2
  401ea4:	f7ff fff2 	bl	401e8c <__retarget_lock_acquire_recursive>
  401ea8:	4b29      	ldr	r3, [pc, #164]	; (401f50 <__register_exitproc+0xbc>)
  401eaa:	681c      	ldr	r4, [r3, #0]
  401eac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d03e      	beq.n	401f32 <__register_exitproc+0x9e>
  401eb4:	685a      	ldr	r2, [r3, #4]
  401eb6:	2a1f      	cmp	r2, #31
  401eb8:	dc1c      	bgt.n	401ef4 <__register_exitproc+0x60>
  401eba:	f102 0e01 	add.w	lr, r2, #1
  401ebe:	b176      	cbz	r6, 401ede <__register_exitproc+0x4a>
  401ec0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401ec4:	2401      	movs	r4, #1
  401ec6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401eca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401ece:	4094      	lsls	r4, r2
  401ed0:	4320      	orrs	r0, r4
  401ed2:	2e02      	cmp	r6, #2
  401ed4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401ed8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401edc:	d023      	beq.n	401f26 <__register_exitproc+0x92>
  401ede:	3202      	adds	r2, #2
  401ee0:	f8c3 e004 	str.w	lr, [r3, #4]
  401ee4:	6828      	ldr	r0, [r5, #0]
  401ee6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401eea:	f7ff ffd1 	bl	401e90 <__retarget_lock_release_recursive>
  401eee:	2000      	movs	r0, #0
  401ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ef4:	4b17      	ldr	r3, [pc, #92]	; (401f54 <__register_exitproc+0xc0>)
  401ef6:	b30b      	cbz	r3, 401f3c <__register_exitproc+0xa8>
  401ef8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401efc:	f3af 8000 	nop.w
  401f00:	4603      	mov	r3, r0
  401f02:	b1d8      	cbz	r0, 401f3c <__register_exitproc+0xa8>
  401f04:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401f08:	6002      	str	r2, [r0, #0]
  401f0a:	2100      	movs	r1, #0
  401f0c:	6041      	str	r1, [r0, #4]
  401f0e:	460a      	mov	r2, r1
  401f10:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401f14:	f04f 0e01 	mov.w	lr, #1
  401f18:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401f1c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401f20:	2e00      	cmp	r6, #0
  401f22:	d0dc      	beq.n	401ede <__register_exitproc+0x4a>
  401f24:	e7cc      	b.n	401ec0 <__register_exitproc+0x2c>
  401f26:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401f2a:	430c      	orrs	r4, r1
  401f2c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401f30:	e7d5      	b.n	401ede <__register_exitproc+0x4a>
  401f32:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401f36:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401f3a:	e7bb      	b.n	401eb4 <__register_exitproc+0x20>
  401f3c:	6828      	ldr	r0, [r5, #0]
  401f3e:	f7ff ffa7 	bl	401e90 <__retarget_lock_release_recursive>
  401f42:	f04f 30ff 	mov.w	r0, #4294967295
  401f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f4a:	bf00      	nop
  401f4c:	20400c50 	.word	0x20400c50
  401f50:	00401f58 	.word	0x00401f58
  401f54:	00000000 	.word	0x00000000

00401f58 <_global_impure_ptr>:
  401f58:	20400828                                (.@ 

00401f5c <_init>:
  401f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f5e:	bf00      	nop
  401f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f62:	bc08      	pop	{r3}
  401f64:	469e      	mov	lr, r3
  401f66:	4770      	bx	lr

00401f68 <__init_array_start>:
  401f68:	00401e39 	.word	0x00401e39

00401f6c <__frame_dummy_init_array_entry>:
  401f6c:	00400165                                e.@.

00401f70 <_fini>:
  401f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f72:	bf00      	nop
  401f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f76:	bc08      	pop	{r3}
  401f78:	469e      	mov	lr, r3
  401f7a:	4770      	bx	lr

00401f7c <__fini_array_start>:
  401f7c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <GOTmelody>:
20400010:	0188 0000 0008 0000 0106 0000 0008 0000     ................
20400020:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400030:	0188 0000 0008 0000 0106 0000 0008 0000     ................
20400040:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400050:	0188 0000 0008 0000 0106 0000 0008 0000     ................
20400060:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400070:	0188 0000 0008 0000 0106 0000 0008 0000     ................
20400080:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400090:	0188 0000 0008 0000 0106 0000 0008 0000     ................
204000a0:	014a 0000 0010 0000 015d 0000 0010 0000     J.......].......
204000b0:	0188 0000 0008 0000 0106 0000 0008 0000     ................
204000c0:	014a 0000 0010 0000 015d 0000 0010 0000     J.......].......
204000d0:	0188 0000 0008 0000 0106 0000 0008 0000     ................
204000e0:	014a 0000 0010 0000 015d 0000 0010 0000     J.......].......
204000f0:	0188 0000 0008 0000 0106 0000 0008 0000     ................
20400100:	014a 0000 0010 0000 015d 0000 0010 0000     J.......].......
20400110:	0188 0000 fffc ffff 0106 0000 fffc ffff     ................
20400120:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400130:	0188 0000 0004 0000 0106 0000 0004 0000     ................
20400140:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400150:	0126 0000 ffff ffff 015d 0000 fffc ffff     &.......].......
20400160:	00e9 0000 fffc ffff 0137 0000 0010 0000     ........7.......
20400170:	0126 0000 0010 0000 015d 0000 0004 0000     &.......].......
20400180:	00e9 0000 fffc ffff 0137 0000 0010 0000     ........7.......
20400190:	0126 0000 0010 0000 0106 0000 ffff ffff     &...............
204001a0:	0188 0000 fffc ffff 0106 0000 fffc ffff     ................
204001b0:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
204001c0:	0188 0000 0004 0000 0106 0000 0004 0000     ................
204001d0:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
204001e0:	0126 0000 ffff ffff 015d 0000 fffc ffff     &.......].......
204001f0:	00e9 0000 fffc ffff 0137 0000 0010 0000     ........7.......
20400200:	0126 0000 0010 0000 015d 0000 0004 0000     &.......].......
20400210:	00e9 0000 fffc ffff 0137 0000 0010 0000     ........7.......
20400220:	0126 0000 0010 0000 0106 0000 ffff ffff     &...............
20400230:	0188 0000 fffc ffff 0106 0000 fffc ffff     ................
20400240:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400250:	0188 0000 0004 0000 0106 0000 0004 0000     ................
20400260:	0137 0000 0010 0000 015d 0000 0010 0000     7.......].......
20400270:	0126 0000 fffe ffff 015d 0000 fffc ffff     &.......].......
20400280:	00e9 0000 fffc ffff 0126 0000 fff8 ffff     ........&.......
20400290:	0137 0000 fff8 ffff 0126 0000 fff8 ffff     7.......&.......
204002a0:	00e9 0000 fff8 ffff 0106 0000 ffff ffff     ................
204002b0:	020b 0000 fffe ffff 01d2 0000 fffe ffff     ................
204002c0:	0106 0000 fffe ffff 0188 0000 fffe ffff     ................
204002d0:	0137 0000 fffe ffff 0137 0000 fffc ffff     7.......7.......
204002e0:	015d 0000 fffc ffff 0188 0000 ffff ffff     ]...............
204002f0:	020b 0000 fffe ffff 01d2 0000 fffe ffff     ................
20400300:	0106 0000 fffe ffff 0188 0000 fffe ffff     ................
20400310:	0137 0000 fffe ffff 0137 0000 fffc ffff     7.......7.......
20400320:	0126 0000 fffc ffff 020b 0000 0008 0000     &...............
20400330:	0188 0000 0008 0000 019f 0000 0010 0000     ................
20400340:	01d2 0000 0010 0000 020b 0000 0008 0000     ................
20400350:	0188 0000 0008 0000 019f 0000 0010 0000     ................
20400360:	01d2 0000 0010 0000 020b 0000 0008 0000     ................
20400370:	0188 0000 0008 0000 019f 0000 0010 0000     ................
20400380:	01d2 0000 0010 0000 020b 0000 0008 0000     ................
20400390:	0188 0000 0008 0000 019f 0000 0010 0000     ................
204003a0:	01d2 0000 0010 0000 0000 0000 0004 0000     ................
204003b0:	033f 0000 0010 0000 03a4 0000 0010 0000     ?...............
204003c0:	0417 0000 0008 0000 0310 0000 0008 0000     ................
204003d0:	033f 0000 0010 0000 03a4 0000 0010 0000     ?...............
204003e0:	0417 0000 0008 0000 0310 0000 0010 0000     ................
204003f0:	033f 0000 0010 0000 03a4 0000 0010 0000     ?...............
20400400:	0417 0000 0008 0000 0310 0000 0008 0000     ................
20400410:	033f 0000 0010 0000 03a4 0000 0010 0000     ?...............

20400420 <HPmelody>:
20400420:	0000 0000 0002 0000 0126 0000 0004 0000     ........&.......
20400430:	0188 0000 fffc ffff 01d2 0000 0008 0000     ................
20400440:	01b8 0000 0004 0000 0188 0000 0002 0000     ................
20400450:	024b 0000 0004 0000 020b 0000 fffe ffff     K...............
20400460:	01b8 0000 fffe ffff 0188 0000 fffc ffff     ................
20400470:	01d2 0000 0008 0000 01b8 0000 0004 0000     ................
20400480:	015d 0000 0002 0000 019f 0000 0004 0000     ]...............
20400490:	0126 0000 ffff ffff 0126 0000 0004 0000     &.......&.......
204004a0:	0188 0000 fffc ffff 01d2 0000 0008 0000     ................
204004b0:	01b8 0000 0004 0000 0188 0000 0002 0000     ................
204004c0:	024b 0000 0004 0000 02ba 0000 0002 0000     K...............
204004d0:	0293 0000 0004 0000 026e 0000 0002 0000     ........n.......
204004e0:	01ee 0000 0004 0000 026e 0000 fffc ffff     ........n.......
204004f0:	024b 0000 0008 0000 022a 0000 0004 0000     K.......*.......
20400500:	0115 0000 0002 0000 01ee 0000 0004 0000     ................
20400510:	0188 0000 ffff ffff 01d2 0000 0004 0000     ................
20400520:	024b 0000 0002 0000 01d2 0000 0004 0000     K...............
20400530:	024b 0000 0002 0000 01d2 0000 0004 0000     K...............
20400540:	026e 0000 0002 0000 024b 0000 0004 0000     n.......K.......
20400550:	022a 0000 0002 0000 01b8 0000 0004 0000     *...............
20400560:	01d2 0000 fffc ffff 024b 0000 0008 0000     ........K.......
20400570:	022a 0000 0004 0000 0115 0000 0002 0000     *...............
20400580:	0126 0000 0004 0000 024b 0000 ffff ffff     &.......K.......
20400590:	0000 0000 0004 0000 01d2 0000 0004 0000     ................
204005a0:	024b 0000 0002 0000 01d2 0000 0004 0000     K...............
204005b0:	024b 0000 0002 0000 01d2 0000 0004 0000     K...............
204005c0:	02ba 0000 0002 0000 0293 0000 0004 0000     ................
204005d0:	026e 0000 0002 0000 01ee 0000 0004 0000     n...............
204005e0:	026e 0000 fffc ffff 024b 0000 0008 0000     n.......K.......
204005f0:	022a 0000 0004 0000 0115 0000 0002 0000     *...............
20400600:	01d2 0000 0004 0000 0188 0000 ffff ffff     ................

20400610 <SOSmelody>:
20400610:	0126 0000 0004 0000 01b8 0000 0004 0000     &...............
20400620:	01b8 0000 0004 0000 0000 0000 0008 0000     ................
20400630:	014a 0000 0008 0000 01ee 0000 0002 0000     J...............
20400640:	015d 0000 0004 0000 020b 0000 0004 0000     ]...............
20400650:	020b 0000 0004 0000 0000 0000 0008 0000     ................
20400660:	014a 0000 0008 0000 01ee 0000 0002 0000     J...............
20400670:	0126 0000 0004 0000 01b8 0000 0004 0000     &...............
20400680:	01b8 0000 0004 0000 0000 0000 0008 0000     ................
20400690:	014a 0000 0008 0000 01ee 0000 0002 0000     J...............
204006a0:	015d 0000 0004 0000 020b 0000 0004 0000     ]...............
204006b0:	020b 0000 0004 0000 0000 0000 0008 0000     ................
204006c0:	014a 0000 0008 0000 01ee 0000 0002 0000     J...............
204006d0:	0126 0000 0008 0000 015d 0000 0008 0000     &.......].......
204006e0:	024b 0000 0002 0000 0126 0000 0008 0000     K.......&.......
204006f0:	015d 0000 0008 0000 024b 0000 0002 0000     ].......K.......
20400700:	0293 0000 fffc ffff 02ba 0000 0008 0000     ................
20400710:	0293 0000 0008 0000 02ba 0000 0008 0000     ................
20400720:	0293 0000 0008 0000 020b 0000 0008 0000     ................
20400730:	01b8 0000 0002 0000 01b8 0000 0004 0000     ................
20400740:	0126 0000 0004 0000 015d 0000 0008 0000     &.......].......
20400750:	0188 0000 0008 0000 01b8 0000 fffe ffff     ................
20400760:	01b8 0000 0004 0000 0126 0000 0004 0000     ........&.......
20400770:	015d 0000 0008 0000 0188 0000 0008 0000     ]...............
20400780:	014a 0000 fffe ffff 0126 0000 0008 0000     J.......&.......
20400790:	015d 0000 0008 0000 024b 0000 0002 0000     ].......K.......
204007a0:	0126 0000 0008 0000 015d 0000 0008 0000     &.......].......
204007b0:	024b 0000 0002 0000 0293 0000 fffc ffff     K...............
204007c0:	02ba 0000 0008 0000 0293 0000 0008 0000     ................
204007d0:	02ba 0000 0008 0000 0293 0000 0008 0000     ................
204007e0:	020b 0000 0008 0000 01b8 0000 0002 0000     ................
204007f0:	01b8 0000 0004 0000 0126 0000 0004 0000     ........&.......
20400800:	015d 0000 0008 0000 0188 0000 0008 0000     ]...............
20400810:	01b8 0000 0002 0000 01b8 0000 0004 0000     ................
20400820:	0126 0000 0001 0000                         &.......

20400828 <impure_data>:
20400828:	0000 0000 0b14 2040 0b7c 2040 0be4 2040     ......@ |.@ ..@ 
	...
204008d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204008e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400c50 <__atexit_recursive_mutex>:
20400c50:	0cf0 2040                                   ..@ 
